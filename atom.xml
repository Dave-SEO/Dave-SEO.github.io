<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>永无止境</title>
  
  <subtitle>奋斗不息</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://myzhangning.top/"/>
  <updated>2019-08-03T10:19:02.338Z</updated>
  <id>http://myzhangning.top/</id>
  
  <author>
    <name>Dave-SEO</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue-cli3 + TS 项目搭建</title>
    <link href="http://myzhangning.top/2019/08/03/vueTs/"/>
    <id>http://myzhangning.top/2019/08/03/vueTs/</id>
    <published>2019-08-03T09:40:32.000Z</published>
    <updated>2019-08-03T10:19:02.338Z</updated>
    
    <content type="html"><![CDATA[<h5 id="安装vuecli"><a href="#安装vuecli" class="headerlink" title="安装vuecli"></a>安装vuecli</h5><ol><li>npm install -g @vue/cli  #OR yarn global add @vue/cli</li><li><p>vuecli 2 和 3同时安装的方法</p><ul><li>Vue CLI &gt;= 3 和旧版使用了相同的 vue 命令，所以 Vue CLI 2 (vue-cli) 被覆盖了。如果你仍然需要使用旧版本的 vue init 功能，你可以全局安装一个桥接工具：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br><span class="line"> <span class="comment">//`vue init` 的运行效果将会跟 `vue-cli@2.x` 相同</span></span><br><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure></li></ul></li><li><p>通过 vue ui 命令以图形化界面创建和管理项目</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    vue ui</span><br><span class="line">   <span class="comment">// 上述命令会打开一个浏览器窗口，并以图形化界面将你引导至项目创建的流程。</span></span><br><span class="line">  <span class="comment">// 选择要存放新项目的文件夹后，点击底部的“在此创建新项目”，然后进入配置流程，一共四个流</span></span><br><span class="line"><span class="comment">//   程：“详情” - “预设” - “功能” - “配置”，我们来逐个配置。</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>详情<ol><li>填写项目名，这里我们写的是”vue-ts-project”，然后选择包管理器，我这里选的是npm，<br>如果你建了git仓库，你可以在git栏填写git的仓库地址。配置完成后点击“下一步”。</li></ol></li><li>预设</li></ul><ol><li>每次创建一次项目，你的功能配置都可以保存为预设，方便下次直接使用，这里我们先选择手动，<br>来手动配置项目。然后点击“下一步”。</li></ol><ul><li>功能–这里我们勾选这几项：</li></ul><ol><li>Babel：使用Babel可以将新特性语法转为低版本浏览器支持的语法；</li><li>TypeScript：这个肯定要勾选了，因为我们要使用TypeScript开发；</li><li>Router：我们要开发单页面SPA应用，所以页面间的跳转需要使用前端路由；</li><li>Vuex：多个页面直接或者组件之间的通信可以使用Vuex来做状态管理；</li><li>CSS Pre-processors：CSS预处理器，如果你使用Less或者Sass等CSS预处理器编写CSS样式，则勾选这项；</li><li>Linter/Formatter：代码规范或格式检查器，如果你需要使用TSLint对代码规范或格式进行检验，勾选这项；</li><li>使用配置文件：如果需要将一些插件的配置保存在各自的配置文件中，则需要勾选这项。</li><li>配置完成后点击“下一步”。</li></ol><ul><li>配置</li></ul><ol><li><p>Use class-style component syntax? （这项勾选上代表要在类风格的组件中使用@Component装饰器）</p></li><li><p>Use Babel alongside TypeScript for auto-detected polyfills?<br>（勾选这一项后，会同时使用Babel和TypeScript对新标准语法进行转义。）</p></li><li>Pick a CSS pre-processor （这里我选择的是Less，你可以根据自己习惯勾选。）</li><li>Pick a linter / formatter config<br>（这里是选择代码检查工具，我们使用TypeScript进行开发，所以选择TSLint。）</li><li>Lint on save （勾选这一项后，会在文件保存后进行代码风格和格式的检验。）</li></ol><ul><li>创建项目<br>Vue CLI会根据我们的配置生成配合文件，同时会帮我们安装好依赖。<h5 id="项目结构介绍"><a href="#项目结构介绍" class="headerlink" title="项目结构介绍"></a>项目结构介绍</h5></li><li>public文件夹</li></ul><ol><li>favicon.ico： 显示在浏览器标签栏标题前面的小图标</li><li>index.html： 编译html文件的模板</li></ol><ul><li>src</li></ul><ol><li>assets： 存放一些图片、字体等静态资源</li><li>components： 一些可以复用的组件存放在这里</li><li>views： 页面视图vue文件存放在这里</li><li>main.ts： 项目入口文件</li><li>router.ts： 前端路由配置文件</li><li>shims-tsx.d.ts： 增加对JSX语法的类型支持的声明文件</li><li>shims-vue.d.ts： 用于让编译器识别.vue后缀的文件</li><li>store.ts： 状态管理vuex配置文件</li><li>brwserslistrc： 配置编译后的代码需要支持的浏览器列表</li><li>.gitignore： 设置提交到git时需要忽略的文件</li><li>babel.config.js： babel的配置文件</li><li>package-lock.json： 锁定依赖版本号的文件</li><li>package.json： npm项目最基本的配置文件</li><li>postcss.config.js： postcss的配置文件</li><li>README.md： 项目介绍文件</li><li>tsconfig.json： 这个前面讲过了，TypeScript编译选项配置文件</li><li>tslint.json： TSLint配置文件</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;安装vuecli&quot;&gt;&lt;a href=&quot;#安装vuecli&quot; class=&quot;headerlink&quot; title=&quot;安装vuecli&quot;&gt;&lt;/a&gt;安装vuecli&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;npm install -g @vue/cli  #OR yarn global
      
    
    </summary>
    
    
      <category term="Vue + TS" scheme="http://myzhangning.top/tags/Vue-TS/"/>
    
  </entry>
  
  <entry>
    <title>electron</title>
    <link href="http://myzhangning.top/2019/06/17/electron/"/>
    <id>http://myzhangning.top/2019/06/17/electron/</id>
    <published>2019-06-17T09:00:00.000Z</published>
    <updated>2019-06-20T16:33:18.717Z</updated>
    
    <content type="html"><![CDATA[<h5 id="electron-简介"><a href="#electron-简介" class="headerlink" title="electron 简介"></a>electron 简介</h5><ol><li>Electron是由Github开发，用HTML，CSS和JavaScript来构建跨平台桌面应用程序的一个开源库。<br> Electron通过将Chromium和Node.js合并到同一个运行时环境中，并将其打包为Mac，Windows和Linux系统下的应用来实现这一目的。</li></ol><h5 id="主进程-Main-Process"><a href="#主进程-Main-Process" class="headerlink" title="主进程 Main Process"></a>主进程 Main Process</h5><ol><li>可以使用和系统对接的Electron API- 创建菜单，上传文件等</li><li>创建渲染进程 - Renderer Process</li><li>全面支持nodejs</li><li>只有一个，做为整个程序的入口点</li></ol><h5 id="渲染进程-Renderer-Process"><a href="#渲染进程-Renderer-Process" class="headerlink" title="渲染进程-Renderer Process"></a>渲染进程-Renderer Process</h5><ol><li>可以有多个，每个对应一个窗口</li><li>每个都是一个单独的进程</li><li>全面支持nodejs和DOM API</li><li>可以使用一部分Electron提供的API</li></ol><h5 id="创建一个简单的HelloWorld"><a href="#创建一个简单的HelloWorld" class="headerlink" title="创建一个简单的HelloWorld"></a>创建一个简单的HelloWorld</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;app,BrowserWindow&#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * BrowserWindow(创建和控制浏览器窗口)</span></span><br><span class="line"><span class="comment">  * app (控制你的应用程序的事件生命周期。)</span></span><br><span class="line"><span class="comment">    ready(当 Electron 完成初始化时被触发)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.on(<span class="string">'ready'</span>,()=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> MainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">      width: <span class="number">800</span>,</span><br><span class="line">      height:<span class="number">600</span>,</span><br><span class="line">      webPreferences:&#123;</span><br><span class="line">        <span class="comment">// 可以使用nodeAPI</span></span><br><span class="line">        nodeIntegration: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    MainWindow.loadFile(<span class="string">'index.html'</span>)</span><br><span class="line">    <span class="keyword">const</span> secondWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">      width: <span class="number">400</span>,</span><br><span class="line">      height: <span class="number">300</span>,</span><br><span class="line">      webPreferences: &#123;</span><br><span class="line">        nodeIntegration: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      parent: MainWindow</span><br><span class="line">    &#125;)</span><br><span class="line">    secondWindow.loadFile(<span class="string">'second.html'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="进程间的通讯方式"><a href="#进程间的通讯方式" class="headerlink" title="进程间的通讯方式"></a>进程间的通讯方式</h5><ol><li>Electron 使用IPC(interprocess communication) 在进程之间进行通讯和Chromium 完全一致</li></ol><h5 id="ipcRenderer-ipcMain"><a href="#ipcRenderer-ipcMain" class="headerlink" title="ipcRenderer,ipcMain"></a>ipcRenderer,ipcMain</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>,()=&gt;&#123;</span><br><span class="line">  <span class="comment">// 发送</span></span><br><span class="line">    ipcRenderer.send(<span class="string">'message'</span>,<span class="string">'Hello-World'</span>)</span><br><span class="line">    <span class="comment">// 接收</span></span><br><span class="line">    ipcRenderer.on(<span class="string">'reply'</span>,(event,arg)=&gt;&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'message'</span>).innerHTML = arg</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line">  ipcMain.on(<span class="string">'message'</span>,(event, arg)=&gt;&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(arg)</span><br><span class="line">      <span class="comment">// 收到消息通知子进程</span></span><br><span class="line">      event.sender.send(<span class="string">'reply'</span>,<span class="string">'hello from main'</span>)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h5 id="数据持久化的方式"><a href="#数据持久化的方式" class="headerlink" title="数据持久化的方式"></a>数据持久化的方式</h5><ol><li>数据库</li><li>H5本地存储</li><li>使用本地文件 （electron中使用electron-store）</li></ol><h5 id="应用打包"><a href="#应用打包" class="headerlink" title="应用打包"></a>应用打包</h5><ol><li>手动打包</li><li>Electron packager</li><li>Electron builder</li></ol><h5 id="demo地址"><a href="#demo地址" class="headerlink" title="demo地址"></a>demo地址</h5><ol><li><a href="https://github.com/Dave-SEO/electron" target="_blank" rel="noopener">项目地址</a></li><li>应用下载（复制到浏览器）：</li></ol><ul><li>pc <a href="https://dave.myzhangning.top/package/electron-quick-start%20Setup%201.0.0.exe" target="_blank" rel="noopener">https://dave.myzhangning.top/package/electron-quick-start%20Setup%201.0.0.exe</a></li><li>mac <a href="https://dave.myzhangning.top/package/simple-music-player-1.0.0.dmg" target="_blank" rel="noopener">https://dave.myzhangning.top/package/simple-music-player-1.0.0.dmg</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;electron-简介&quot;&gt;&lt;a href=&quot;#electron-简介&quot; class=&quot;headerlink&quot; title=&quot;electron 简介&quot;&gt;&lt;/a&gt;electron 简介&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;Electron是由Github开发，用HTML，CSS
      
    
    </summary>
    
    
      <category term="electron" scheme="http://myzhangning.top/tags/electron/"/>
    
  </entry>
  
  <entry>
    <title>typescript</title>
    <link href="http://myzhangning.top/2019/06/08/ts/"/>
    <id>http://myzhangning.top/2019/06/08/ts/</id>
    <published>2019-06-08T06:50:00.000Z</published>
    <updated>2019-06-08T08:38:00.727Z</updated>
    
    <content type="html"><![CDATA[<h5 id="TypeScript描述"><a href="#TypeScript描述" class="headerlink" title="TypeScript描述"></a>TypeScript描述</h5><ol><li>TypeScript是JavaScript语言的超集，为 JavaScript 添加了可选择的类型标注，大大增强了代码的可读性和可维护性</li><li>TypeScript 可以编译出纯净、 简洁的 JavaScript 代码，并且可以运行在任何浏览器上、Node.js 环境中和任何支持 ECMAScript 3（或更高版本）的JavaScript 引擎中。</li><li>TypeScript 在社区的流行度越来越高，它非常适用于一些大型项目，也非常适用于一些基础库，极大地帮助我们提升了开发效率和体验</li></ol><h6 id="安装-TypeScript"><a href="#安装-TypeScript" class="headerlink" title="安装 TypeScript"></a>安装 TypeScript</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g typescript</span><br><span class="line">检测是否安装成功</span><br><span class="line">tsc -V</span><br></pre></td></tr></table></figure><h5 id="编写第一个TypeScript程序"><a href="#编写第一个TypeScript程序" class="headerlink" title="编写第一个TypeScript程序"></a>编写第一个TypeScript程序</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeter</span> (<span class="params">person</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'Hello, '</span> + person</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> user = <span class="string">'Yee'</span></span><br><span class="line"><span class="built_in">console</span>.log(greeter(user))</span><br><span class="line"> 运行 tsc greeter.ts</span><br><span class="line"> 输出 Hello, Yee</span><br></pre></td></tr></table></figure><h5 id="基础类型-TypeScript-支持与-JavaScript-几乎相同的数据类型，此外还提供了实用的枚举类型"><a href="#基础类型-TypeScript-支持与-JavaScript-几乎相同的数据类型，此外还提供了实用的枚举类型" class="headerlink" title="基础类型 (TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型)"></a>基础类型 (TypeScript 支持与 JavaScript 几乎相同的数据类型，此外还提供了实用的枚举类型)</h5><h6 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isDone: boolean = <span class="literal">false</span></span><br></pre></td></tr></table></figure><h6 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h6><ul><li>和JavaScript一样，TypeScript里的所有数字都是浮点数。这些浮点数的类型是number。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> decLiteral: number = <span class="number">20</span></span><br><span class="line"><span class="keyword">let</span> hexLiteral: number = <span class="number">0x14</span></span><br><span class="line"><span class="keyword">let</span> binaryLiteral: number = <span class="number">0b10100</span></span><br><span class="line"><span class="keyword">let</span> octalLiteral: number = <span class="number">0o24</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name: string = <span class="string">'bob'</span></span><br><span class="line">name = <span class="string">'smith'</span></span><br><span class="line"><span class="keyword">let</span> name: string = <span class="string">`Yee`</span></span><br><span class="line"><span class="keyword">let</span> age: number = <span class="number">37</span></span><br><span class="line"><span class="keyword">let</span> sentence: string = <span class="string">`Hello, my name is <span class="subst">$&#123; name &#125;</span>.</span></span><br><span class="line"><span class="string">I'll be <span class="subst">$&#123; age + <span class="number">1</span> &#125;</span> years old next month.`</span></span><br></pre></td></tr></table></figure><h6 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h6><ul><li>有两种方式可以定义数组。 第一种，可以在元素类型后面接上[],<br>第二种方式是使用数组泛型，Array&lt;元素类型&gt;：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> list: <span class="built_in">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li></ul><h6 id="元组Tuple"><a href="#元组Tuple" class="headerlink" title="元组Tuple"></a>元组Tuple</h6><ul><li>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 比如，你可以定义一对值分别为 string 和 number类型的元组。</span></span><br><span class="line"><span class="keyword">let</span> x: [string, number]</span><br><span class="line">x = [<span class="string">'hello'</span>, <span class="number">10</span>] <span class="comment">// OK</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">'hello'</span>] <span class="comment">// Error</span></span><br><span class="line"><span class="comment">// 当访问一个已知索引的元素，会得到正确的类型：</span></span><br><span class="line"><span class="built_in">console</span>.log(x[<span class="number">0</span>].substr(<span class="number">1</span>)) <span class="comment">// OK</span></span><br><span class="line"><span class="built_in">console</span>.log(x[<span class="number">1</span>].substr(<span class="number">1</span>)) <span class="comment">// Error, 'number' 不存在 'substr' 方法</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h6><ul><li>enum 类型是对 JavaScript 标准数据类型的一个补充。<br>像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">enum Color &#123;Red, Green, Blue&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green</span><br><span class="line"><span class="comment">// 或者，全部都采用手动赋值</span></span><br><span class="line">enum Color &#123;Red = <span class="number">1</span>, Green = <span class="number">2</span>, Blue = <span class="number">4</span>&#125;</span><br><span class="line"><span class="keyword">let</span> c: Color = Color.Green</span><br></pre></td></tr></table></figure></li></ul><h6 id="any"><a href="#any" class="headerlink" title="any"></a>any</h6><ul><li>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用any类型来标记这些变量<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> notSure: any = <span class="number">4</span></span><br><span class="line">notSure = <span class="string">'maybe a string instead'</span></span><br><span class="line">notSure = <span class="literal">false</span> <span class="comment">// 也可以是个 boolean</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="void"><a href="#void" class="headerlink" title="void"></a>void</h6><ul><li><p>void 类型它表示没有任何类型。当一个函数没有返回值时，你通常会见到其返回值类型是void：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">warnUser</span>(<span class="params"></span>): <span class="title">void</span> </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'This is my warning message'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>声明一个 void 类型的变量没有什么大用，因为你只能为它赋予 undefined 和 null：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unusable: <span class="keyword">void</span> = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure></li></ul><h6 id="null-和-undefined"><a href="#null-和-undefined" class="headerlink" title="null 和 undefined"></a>null 和 undefined</h6><ul><li>默认情况下null和undefined是所有类型的子类型。<br>就是说你可以把null和undefined赋值给number类型的变量。</li></ul><h6 id="never"><a href="#never" class="headerlink" title="never"></a>never</h6><ul><li>never 类型表示的是那些永不存在的值的类型</li></ul><h6 id="object"><a href="#object" class="headerlink" title="object"></a>object</h6><ul><li>object 表示非原始类型，也就是除 number，string，boolean，symbol，null<br>或undefined 之外的类型<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">declare <span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">o: object | null</span>): <span class="title">void</span></span></span><br><span class="line"><span class="function"><span class="title">create</span>(<span class="params">&#123; prop: <span class="number">0</span> &#125;</span>) // <span class="title">OK</span></span></span><br><span class="line"><span class="function"><span class="title">create</span>(<span class="params">null</span>) // <span class="title">OK</span></span></span><br><span class="line"><span class="function"><span class="title">create</span>(<span class="params"><span class="number">42</span></span>) // <span class="title">Error</span></span></span><br><span class="line"><span class="function"><span class="title">create</span>(<span class="params"><span class="string">'string'</span></span>) // <span class="title">Error</span></span></span><br><span class="line"><span class="function"><span class="title">create</span>(<span class="params">false</span>) // <span class="title">Error</span></span></span><br><span class="line"><span class="function"><span class="title">create</span>(<span class="params">undefined</span>) // <span class="title">Error</span></span></span><br></pre></td></tr></table></figure></li></ul><h6 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类型断言有两种形式。 其一是“尖括号”语法：</span></span><br><span class="line"><span class="comment">// 另一个为 as 语法：</span></span><br><span class="line"><span class="keyword">let</span> someValue: any = <span class="string">'this is a string'</span></span><br><span class="line"><span class="keyword">let</span> strLength: number = (&lt;string&gt;someValue).length</span><br><span class="line">let strLength1: number = (someValue as string).length</span><br></pre></td></tr></table></figure><h5 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;TypeScript描述&quot;&gt;&lt;a href=&quot;#TypeScript描述&quot; class=&quot;headerlink&quot; title=&quot;TypeScript描述&quot;&gt;&lt;/a&gt;TypeScript描述&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;TypeScript是JavaScript语言的
      
    
    </summary>
    
      <category term="typescript" scheme="http://myzhangning.top/categories/typescript/"/>
    
    
      <category term="typescript" scheme="http://myzhangning.top/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>webrtc</title>
    <link href="http://myzhangning.top/2019/04/18/webrtc/"/>
    <id>http://myzhangning.top/2019/04/18/webrtc/</id>
    <published>2019-04-18T15:00:00.000Z</published>
    <updated>2019-04-17T16:35:16.393Z</updated>
    
    <content type="html"><![CDATA[<h5 id="webRTC-简介（https-appr-tc）"><a href="#webRTC-简介（https-appr-tc）" class="headerlink" title="webRTC 简介（https://appr.tc）"></a>webRTC 简介（<a href="https://appr.tc）" target="_blank" rel="noopener">https://appr.tc）</a></h5><ol><li>2010年google开源跨平台用于浏览器实时传输音视频引擎</li><li>音视频处理+即时通讯的开源库</li></ol><h5 id="webRTC应用"><a href="#webRTC应用" class="headerlink" title="webRTC应用"></a>webRTC应用</h5><ol><li>照相机，音乐播放器，共享远程桌面，录制，即使通讯工具，p2p网络加速文件传输工具，游戏，实时人脸识别，音视频会议，在线教育</li></ol><h5 id="webRTC设备管理"><a href="#webRTC设备管理" class="headerlink" title="webRTC设备管理"></a>webRTC设备管理</h5><ol><li><p>enumerateDevices</p><ul><li>基本格式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ePromise = navigator.mediaDevices.enumerateDevices();</span><br><span class="line"><span class="keyword">if</span>(!navigator.mediaDevices || !navigator.mediaDevices.enumerateDevices)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'设备不支持mediaDevices'</span>)</span><br><span class="line">&#125; <span class="keyword">else</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> mediaDevice = navigator.mediaDevices.enumerateDevices()</span><br><span class="line">    .then(getDevices)</span><br><span class="line">    .catch(handleError)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDevices</span>(<span class="params">deviceInfos</span>)</span>&#123;</span><br><span class="line">    deviceInfos.forEach(<span class="function"><span class="params">deviceInfo</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`设备的种类-<span class="subst">$&#123;deviceInfo.kind&#125;</span>设备的名称-<span class="subst">$&#123;deviceInfo.label&#125;</span>-设备ID-<span class="subst">$&#123;deviceInfo.deviceId&#125;</span>-groupId-<span class="subst">$&#123;deviceInfo.groupId&#125;</span>`</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleError</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.name + e.message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>MediaDevicesInfo</p><ul><li>deviceID 设备ID</li><li>label    设备的名字</li><li>kind     设备的种类</li><li>groupID  两个设备groupID相同，说明是同一个物理设备</li></ul></li></ol><h5 id="音视频采集API"><a href="#音视频采集API" class="headerlink" title="音视频采集API"></a>音视频采集API</h5><ol><li>基本格式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = navigator.mediaDevices.getUserMedia(constraints)</span><br></pre></td></tr></table></figure></li></ol><h5 id="MediaStreamConstraints"><a href="#MediaStreamConstraints" class="headerlink" title="MediaStreamConstraints"></a>MediaStreamConstraints</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> dictionary MediaStreamConstraints&#123;</span><br><span class="line">     (boolean or MediaTrackConstraints) video = <span class="literal">false</span>;</span><br><span class="line">     (boolean or MediaTrackConstraints) audio = <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta"> 'use strict'</span></span><br><span class="line"><span class="keyword">if</span>(!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'设备不支持getUserMedia'</span>)</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> constraints = &#123;</span><br><span class="line">        audio: <span class="literal">true</span>,</span><br><span class="line">        video: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> mediaStream = navigator.mediaDevices.getUserMedia(constraints)</span><br><span class="line">    .then(gotMediaStream)</span><br><span class="line">    .catch(mediaStreamError)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mediaStreamError</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e.message)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gotMediaStream</span>(<span class="params">stream</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> video = <span class="built_in">document</span>.getElementById(<span class="string">'video'</span>);</span><br><span class="line">    video.srcObject = stream</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>适配不同浏览器的方法</p><ul><li><p>自己实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia</span><br></pre></td></tr></table></figure></li><li><p>使用Google开源库 adapter.js (<a href="https://webrtc.github.io/adapter/adapter-latest.js" target="_blank" rel="noopener">https://webrtc.github.io/adapter/adapter-latest.js</a>)</p></li></ul></li><li>webRTC音视频采集约束<ol><li>width,height,</li><li>aspectRatio (描述用于一个视频轨迹的宽高比的可接受的或所需的值（一个或多个）。该值是宽度除以高度，并四舍五入到十位小数。<pre><code>例如，16：9的标准高清视频宽高比可以计算为1920/1080或1.7777777778)</code></pre></li><li>frameRate(帧率，可以控制码流，如果帧率低会看到画面不平滑，帧率大码流大，相当于每秒采集的数据变多) 可以设置min max</li><li>facingMode（控制摄像头翻转）<ul><li>user 前置摄像头</li><li>environment 后置摄像头</li><li>left 前置左侧摄像头</li><li>right 前置右侧摄像头</li></ul></li><li>resizeMode （采集的画面要不要裁剪）</li><li>volume (0.0~1.0)</li><li>sampleRate (音频采样率如：48000，36000，8000)</li><li>sampleSize（音频采样率，一般16位，也就是两个字节）</li><li>echoCancellation（回音消除，值为布尔值）</li><li>autoGainControl（自定义增益，在原有声音的基础上是否增加音量）</li><li>noiseSuppression（降噪，在采集数据时是否要开启降噪功能，值为布尔值）</li><li>latency<ul><li>设置latency小，延迟小，当网络不好时会出现花屏，卡顿现象等问题，好处是可以实时通讯</li><li>设置latency大，画面，声音更平滑，及时性不好</li></ul></li><li>channelCount（单声道双声道，一般为单声道，如果是乐器为双声道）</li><li>deviceID (设备ID)</li><li>groupID  （设备组ID，若组ID相同则是同一套设备）</li></ol></li></ol><h5 id="启动nodejs服务"><a href="#启动nodejs服务" class="headerlink" title="启动nodejs服务"></a>启动nodejs服务</h5><ol><li>forever start app.js(启用后台运行程序)</li></ol><h5 id="视频特效"><a href="#视频特效" class="headerlink" title="视频特效"></a>视频特效</h5><ol><li>grayscale   灰度    opacity      透明度</li><li>sepia       褐色    brightness   亮度</li><li>saturate    饱和度  contrast     对比度</li><li>hue-rotate  色相旋转  blur       模糊</li><li>invert      反色     drop-shadow  阴影</li></ol><h5 id="MediaStream-方法"><a href="#MediaStream-方法" class="headerlink" title="MediaStream 方法"></a>MediaStream 方法</h5><ol><li>mediaStream.addTrack()<ul><li>给流添加一个新轨道。指定一个MediaStreamTrack对象作为参数</li></ul></li><li>mediaStream.removeTrack()<ul><li>移除一个轨道</li></ul></li><li>mediaStream.getVideoTracks()<ul><li>获取视频轨</li></ul></li><li>mediaStream.getAudioTracks()<ul><li>获取音频轨</li></ul></li></ol><h5 id="MediaStream-事件"><a href="#MediaStream-事件" class="headerlink" title="MediaStream 事件"></a>MediaStream 事件</h5><ol><li>MediaStream.onaddtrack</li><li>MediaStream.onended</li><li>MediaStream.onremovetrack</li></ol><h5 id="webRTC录制"><a href="#webRTC录制" class="headerlink" title="webRTC录制"></a>webRTC录制</h5><ol><li>MediaRecoder<ul><li>基本格式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mediaRecorder = <span class="keyword">new</span> MediaRecorder(stream,[options]);</span><br><span class="line">参数stream（媒体流） 可从getUserMedia,&lt;video&gt;,&lt;audio&gt;或&lt;canvas&gt;获取</span><br><span class="line">options   限制选项 -</span><br><span class="line"><span class="number">1.</span> mimeType   指定录制的是音频还是视频，录制的格式是什么</span><br><span class="line">   - video/webm</span><br><span class="line">   - audio/webm</span><br><span class="line">   - video/webm;codecs = vp8</span><br><span class="line">   - video/webm;codecs = h264</span><br><span class="line">   - audio/webm;codecs = opus</span><br><span class="line"><span class="number">2.</span> audioBitsPerSecond 音频编码</span><br><span class="line"><span class="number">3.</span> videoBitsPerSecond 视频码率</span><br><span class="line"><span class="number">4.</span> bitsPerSecond 整体码率</span><br></pre></td></tr></table></figure></li></ul></li></ol><h5 id="mediaRecorder-API"><a href="#mediaRecorder-API" class="headerlink" title="mediaRecorder API"></a>mediaRecorder API</h5><ol><li>MediaRecorder.start(timeslice)<ul><li>没有选择timeslice，则它所有的录制数据都会保存到buffer里去</li><li>如果设置timeslice，会按照时间切片存储数据</li></ul></li><li>MediaRecorder.stop()<ul><li>停止录制，此时会触发包括最终blob数据的dataavailable事件</li></ul></li><li>MediaRecorder.pause<ul><li>暂停录制</li></ul></li><li>MediaRecorder.resume()<ul><li>恢复录制</li></ul></li><li>MediaRecorder.isTypeSupported()<ul><li>检查可以录制的格式 –mp4,mp3…</li></ul></li></ol><h5 id="MediaRecorder-事件"><a href="#MediaRecorder-事件" class="headerlink" title="MediaRecorder 事件"></a>MediaRecorder 事件</h5><ol><li>MediaRecorder.ondataavailable<ul><li>当数据有效时触发</li><li>每次记录一定时间的数据时（如果没有指定时间片，则记录整个数据时）会定期触发</li></ul></li><li>MediaRecorder.onerror<ul><li>当有错误发生时，录制会被停止</li></ul></li></ol><h5 id="JavaScript几种存储数据的方式"><a href="#JavaScript几种存储数据的方式" class="headerlink" title="JavaScript几种存储数据的方式"></a>JavaScript几种存储数据的方式</h5><ol><li>字符串</li><li>Blob</li><li>ArrayBuffer</li><li>ArrayBufferView</li></ol><h5 id="webRTC信令服务器"><a href="#webRTC信令服务器" class="headerlink" title="webRTC信令服务器"></a>webRTC信令服务器</h5><h5 id="socket-io-实现信令服务器"><a href="#socket-io-实现信令服务器" class="headerlink" title="socket.io 实现信令服务器"></a>socket.io 实现信令服务器</h5><ol><li>socket.io是WebSocket超集</li><li>socket.io有房间的概念</li><li>socket.io 跨平台，跨终端，跨语言</li></ol><h5 id="Socket-IO发送消息"><a href="#Socket-IO发送消息" class="headerlink" title="Socket.IO发送消息"></a>Socket.IO发送消息</h5><ol><li>给本次连接发消息  socket.emit()</li><li>给某个房间内所有人发送消息  io.in(room).emit()  io 为所有的节点</li><li>除本连接外，给某个房间内所有人发送消息 socket.to(room).emit()<ul><li>socket 为创建连接时的socket</li></ul></li><li>除本连接外，给所有人发送消息 socket.broadcast.emit()</li></ol><h5 id="socket-io客户端处理消息"><a href="#socket-io客户端处理消息" class="headerlink" title="socket.io客户端处理消息"></a>socket.io客户端处理消息</h5><ol><li>发送action命令<ul><li>S: socket.emit(‘action’);</li><li>C: socket.on(‘action’,function(){…});</li></ul></li><li>发送一个action命令，带数据<ul><li>S: socket.emit(‘action’,data);</li><li>C: socket.on(‘action’,function(data){…});</li></ul></li><li>发送action命令，还有两个数据<ul><li>S: soket.emit(action,arg1,arg2);</li><li>C: socket.on(‘action’,function(arg1,arg2){…})</li></ul></li><li>发送一个action命令，在emit方法中包含回调函数<ul><li>S: socket.emit(‘action’,data,function(arg1,arg2){…});</li><li>C: socket.on(‘action’, function(data,fn){‘a’,’b’})</li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;webRTC-简介（https-appr-tc）&quot;&gt;&lt;a href=&quot;#webRTC-简介（https-appr-tc）&quot; class=&quot;headerlink&quot; title=&quot;webRTC 简介（https://appr.tc）&quot;&gt;&lt;/a&gt;webRTC 简介（&lt;a
      
    
    </summary>
    
    
      <category term="webrtc" scheme="http://myzhangning.top/tags/webrtc/"/>
    
  </entry>
  
  <entry>
    <title>dart</title>
    <link href="http://myzhangning.top/2019/03/26/dart/"/>
    <id>http://myzhangning.top/2019/03/26/dart/</id>
    <published>2019-03-26T15:00:00.000Z</published>
    <updated>2019-03-28T16:34:02.543Z</updated>
    
    <content type="html"><![CDATA[<h4 id="dart-概述"><a href="#dart-概述" class="headerlink" title="dart 概述"></a>dart 概述</h4><ol><li>dart 是Google发布的一门开源编程语言</li><li>dart 初期目标是成为下一代的web开发语言</li><li>dart 目前已可用于全平台开发</li><li>dart 是一门面向对象的编程语言</li></ol><h4 id="dart-应用场景"><a href="#dart-应用场景" class="headerlink" title="dart 应用场景"></a>dart 应用场景</h4><ol><li>web开发</li><li>跨平台移动应用开发</li><li>脚本或服务端开发</li></ol><h4 id="helloWorld"><a href="#helloWorld" class="headerlink" title="helloWorld"></a>helloWorld</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main 程序入口</span></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line"><span class="comment">// 控制台打印</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'HelloWorld'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h4><ol><li>使用var 声明变量，可赋予不同类型的值</li><li>未初始化时，默认值为null</li><li>使用final声明一个只能赋值一次的变量</li><li>使用const 来声明常量</li><li>使用const 声明的必须是编译期常量（在编译阶段就能确定的值）</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// main 程序入口</span></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">// 控制台打印</span></span><br><span class="line">  <span class="keyword">var</span> a; </span><br><span class="line">  <span class="built_in">print</span>(a); <span class="comment">//null</span></span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">print</span>(a); <span class="comment">//1</span></span><br><span class="line">  a = <span class="string">'Hello World'</span>;</span><br><span class="line">  <span class="built_in">print</span>(a); <span class="comment">// Hello World</span></span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">print</span>(c); <span class="comment">// 3</span></span><br><span class="line">  <span class="keyword">final</span> d = <span class="number">1</span>;</span><br><span class="line">  d = <span class="number">1</span>; <span class="comment">// d', a final variable, can only be set once.</span></span><br><span class="line">  <span class="keyword">const</span> m = <span class="number">1</span>;</span><br><span class="line">  m = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ol><li><p>内置类型</p><ul><li>数值型-Number</li></ul><ul><li>Int 整型</li><li>double 浮点型</li></ul><ul><li>数值型操作</li></ul><ul><li>运算符：+, -, *, /, ~/(取整), %</li><li>常用属性: isNaN, isEven（偶数）, isOdd（奇数）等</li><li>常用方法：abs(),round(),floor(),ceil(),toInt(),toDouble()<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line"><span class="comment">//可以是具体的类型，也可直接用num</span></span><br><span class="line"><span class="built_in">num</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">double</span> c = <span class="number">3.5</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="number">0.0</span>/<span class="number">0.0</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">print</span>(p.isOdd); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">print</span>(p.isEven); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>字符串- String</li></ul><ul><li>字符串创建<ol><li>使用单引号，双引号创建字符串</li><li>使用三个引号或双引号创建多行字符串</li><li>使用r创建原始raw字符串 (不转译，原样输出)</li></ol></li><li>字符串操作<ol><li>运算符: +, *,==,[]</li><li>插值表达式: ${expression}</li><li>常用属性： length,isEmpty,isNotEmpty</li><li>常用方法：contains(),subString(),startWith(),endWith(),<br>indexOf(),lastIndexOf(),,toLowerCase(),toUpperCase(),<br>trim(),trimLeft(),trimRight(),split(),replaceXXX()</li></ol></li></ul></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line"><span class="built_in">String</span> a = <span class="string">'1'</span>;</span><br><span class="line"><span class="built_in">String</span> b =<span class="string">"2"</span>;</span><br><span class="line"><span class="built_in">String</span> c = <span class="string">"""dart</span></span><br><span class="line"><span class="string">            is final"""</span>;</span><br><span class="line"><span class="built_in">String</span> f = <span class="string">'d  \n dart'</span>;</span><br><span class="line"><span class="built_in">String</span> d = <span class="string">r'd  \n dart'</span>; <span class="comment">// 原样输出</span></span><br><span class="line"><span class="built_in">print</span>(c);</span><br><span class="line"><span class="built_in">print</span>(f);</span><br><span class="line"><span class="built_in">print</span>(d); <span class="comment">// d  \n dart</span></span><br><span class="line"><span class="comment">// 字符串操作</span></span><br><span class="line"><span class="built_in">String</span> str = <span class="string">'hello world'</span>;</span><br><span class="line"><span class="built_in">String</span> str1 = <span class="string">'hello'</span>;</span><br><span class="line"><span class="built_in">print</span>(str + <span class="string">'new'</span>); <span class="comment">//hello worldnew</span></span><br><span class="line"><span class="built_in">print</span>(str*<span class="number">5</span>); <span class="comment">// hello worldhello worldhello worldhello worldhello world</span></span><br><span class="line"><span class="built_in">print</span>(str == str1); <span class="comment">// fasle</span></span><br><span class="line"><span class="built_in">print</span>(str[<span class="number">0</span>]); <span class="comment">// h</span></span><br><span class="line"><span class="built_in">int</span> t = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">int</span> m = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a+b=<span class="subst">$&#123;t+m&#125;</span>"</span>); <span class="comment">//a+b = 11</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a=$t"</span>); <span class="comment">// a = 5</span></span><br><span class="line"><span class="built_in">print</span>(str.contains(<span class="string">'hello'</span>)); <span class="comment">// true  contains包涵</span></span><br><span class="line"><span class="built_in">print</span>(str.substring(<span class="number">0</span>,<span class="number">2</span>)); <span class="comment">//  he</span></span><br><span class="line"><span class="built_in">print</span>(str.startsWith(<span class="string">'a'</span>)); <span class="comment">// false 是否以a开头</span></span><br><span class="line"><span class="built_in">print</span>(str.endsWith(<span class="string">'ld'</span>)); <span class="comment">// true 是否以ld结尾</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>布尔型- Boolean<ul><li>使用bool表示布尔类型</li><li>布尔类型只有true,false</li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> last = <span class="keyword">false</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'hellow'</span>.isEmpty);</span><br></pre></td></tr></table></figure><ul><li>列表(数组)-List<ul><li>List的创建<ol><li>var list = [1,2,3];</li><li>创建不可变的List： var list = const [1,2,3];</li><li>构造创建： var list = new List();</li></ol><ul><li>常用操作</li></ul><ol><li>属性：[],length,isEmpty</li><li>方法：add(),insert(),remove(),clear(),indexOf(),laseIndexOf(),sort(),sublist(),<br>shuffle(),asMap(),forEach()</li></ol></li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'hello'</span>, <span class="string">'worldh'</span>];</span><br><span class="line"><span class="built_in">print</span>(arr.length);</span><br><span class="line">arr.insert(<span class="number">1</span>, <span class="string">'-'</span>);</span><br><span class="line"><span class="built_in">print</span>(arr);</span><br><span class="line">arr.remove(<span class="string">'hello'</span>); <span class="comment">// 移除元素</span></span><br><span class="line"><span class="built_in">print</span>(arr); </span><br><span class="line">arr.clear();</span><br><span class="line"><span class="built_in">print</span>(arr);</span><br><span class="line"><span class="built_in">print</span>(arr.indexOf(<span class="string">'list'</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">print</span>(arr.lastIndexOf(<span class="string">'list'</span>)); <span class="comment">// -1</span></span><br><span class="line">arr.sort();</span><br><span class="line"><span class="built_in">print</span>(arr);</span><br><span class="line"><span class="built_in">print</span>(arr.sublist(<span class="number">2</span>)); <span class="comment">// ['worldh']</span></span><br><span class="line">arr.forEach(<span class="built_in">print</span>); <span class="comment">// -  hello  worldh</span></span><br></pre></td></tr></table></figure><ul><li>键值对-Map<ul><li>Map的创建<ol><li>var a = {‘first’: ‘dart’,’second’};</li><li>创建不可变的map： var a = const {‘first’: ‘dart’,’second’};</li><li>构造创建： var map = new Map();</li></ol></li><li>常用操作<ol><li>属性：[],length,isNotEmpty,isEmpty,keys,values</li><li>方法：containsKey(),containsValue(),remove(),forEach()</li></ol></li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line"><span class="keyword">var</span> map = &#123;<span class="string">'one'</span>: <span class="string">'1'</span>,<span class="string">'s'</span>:<span class="number">1</span>,<span class="string">'s3'</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">print</span>(map);</span><br><span class="line"><span class="keyword">var</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="built_in">print</span>(map1);</span><br><span class="line"><span class="built_in">print</span>(map1.isNotEmpty);</span><br><span class="line"><span class="built_in">print</span>(map[<span class="string">'one'</span>]);</span><br><span class="line"><span class="built_in">print</span>(map.length);</span><br><span class="line"><span class="built_in">print</span>(map.keys);  <span class="comment">//(one,s)</span></span><br><span class="line"><span class="built_in">print</span>(map.values); <span class="comment">// (1,1)</span></span><br><span class="line"><span class="built_in">print</span>(map.isNotEmpty);</span><br><span class="line"><span class="built_in">print</span>(map.containsKey(<span class="string">'one'</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">print</span>(map.containsValue(<span class="string">'2'</span>)); <span class="comment">// false</span></span><br><span class="line">map.remove(<span class="string">'one'</span>); <span class="comment">// 传入key</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'map--$map'</span>);</span><br><span class="line">map.forEach(f);</span><br><span class="line"><span class="keyword">var</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>];</span><br><span class="line"><span class="comment">// print(list.isEmpty);</span></span><br><span class="line"><span class="built_in">print</span>(list.asMap()); <span class="comment">//&#123;0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 3&#125;</span></span><br><span class="line"><span class="comment">// 动态类型 dynamic</span></span><br><span class="line"><span class="keyword">dynamic</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">print</span>(a);</span><br><span class="line"><span class="keyword">var</span> list1 = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="keyword">dynamic</span>&gt;();</span><br><span class="line">list1.add(<span class="string">'3'</span>);</span><br><span class="line">list1.add(<span class="keyword">true</span>);</span><br><span class="line"><span class="built_in">print</span>(list1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> f(key,value)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'mapkey-$key,mapvalue-$value'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>Runes,Symbols</p><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><ul><li>算数运算符<ul><li>加减乘除：+,-,*,/,~/,%</li><li>递增递减：++var, var–,–var,var–</li></ul></li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line"><span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">double</span> b = <span class="number">2.5</span>;</span><br><span class="line"><span class="built_in">print</span>(a + b);</span><br><span class="line"><span class="built_in">print</span>(a - b);</span><br><span class="line"><span class="built_in">print</span>(a * b);</span><br><span class="line"><span class="built_in">print</span>(a / b);</span><br><span class="line"><span class="built_in">print</span>(a ~/ b); <span class="comment">// 取整 </span></span><br><span class="line"><span class="built_in">print</span>(a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关系运算符<ul><li>运算符：==,!=,&gt;,&lt;,&gt;=,&lt;=</li><li>判断内容是否相同使用 ==</li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a &gt; b); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">print</span>(a &lt; b); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">print</span>(a == b); <span class="comment">//fasle</span></span><br><span class="line"><span class="built_in">print</span>(a &gt;= b); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">print</span>(a &lt;= b); <span class="comment">// fasle</span></span><br><span class="line"><span class="built_in">print</span>(a != b);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>逻辑运算符<ul><li>运算符：!,&amp;&amp;,||</li></ul></li><li>赋值运算符<ul><li>基础运算符：=,??= (如果声明的变量有值则为变量的值，没有则为??= 的值)</li><li>复合运算符：+=,-=,*=,/=,%=,~/=</li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> tr = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">int</span> tr1 = <span class="number">20</span>;</span><br><span class="line">tr1 ??= <span class="number">5</span>; <span class="comment">// 如果声明的变量有值则为变量的值，没有则为??= 的值</span></span><br><span class="line"><span class="built_in">print</span>(tr1);</span><br></pre></td></tr></table></figure><ul><li>条件表达式<ul><li>三目运算符：condition?expr1:expr2</li><li>?? 运算符：expr1??expr2 (如果expr1值为空使用expr2的值,如果expr1的值不为空,使用expr1的值)</li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  aa;</span><br><span class="line"><span class="keyword">var</span>  bb = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span>  cc = aa ?? bb;</span><br><span class="line"><span class="built_in">print</span>(cc); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h4 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h4><ol><li>条件语句<ul><li>if语句</li><li>if…else if 语句</li><li>if…else</li></ul></li><li>循环语句<ul><li>for循环</li><li>for…in</li><li>while循环</li><li>do…while循环</li><li>终止循环：break</li><li>跳出当前循环：continue</li></ul></li><li>switch…case语句<ul><li>比较类型：num,String,编译期常量,对象,枚举</li><li>非空case必须有一个break</li><li>default 处理默认情况</li><li>continue 跳转标签（很多语言没有的特性）</li></ul></li></ol><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><ol><li>方法定义<br>返回类型 方法名（参数1，参数2…）{<pre><code>方法体。。。return 返回值</code></pre>}</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span> args)&#123;</span><br><span class="line">    <span class="built_in">print</span>(args);</span><br><span class="line">    getPersion(<span class="string">'zhangsan'</span>, <span class="number">18</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">String</span> getPersion(string name, <span class="built_in">int</span> age)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"name=$name,age=$age"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>方法特性<ul><li>方法也是对象，并且有具体类型function</li><li>返回值类型，参数类型都可以省略</li><li>箭头函数：=&gt; expr 是{return expr;}缩写。只适用于一个表达式</li><li>方法都有返回值。如果没有指定，默认return null</li></ul></li><li>可选参数<ul><li>可选命名参数：{param1,param2}</li><li>可选位置参数：{param1,param2}</li><li>如果存在具体参数，可选参数声明，必须在参数后面</li></ul></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    printPersion(<span class="string">'张三'</span>); <span class="comment">// name=张三,age=null,gender=null</span></span><br><span class="line">    printPersion(<span class="string">'lisi'</span>,age:<span class="number">20</span>); <span class="comment">// name=lisi,age=20,gender=null</span></span><br><span class="line">    printPersion(<span class="string">'name'</span>,age:<span class="number">20</span>,gender:<span class="string">"Male"</span>); <span class="comment">// name=name,age=20,gender=Male</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 基于命名</span></span><br><span class="line">printPersion(<span class="built_in">String</span> name,&#123;<span class="built_in">int</span> age,<span class="built_in">String</span> gender&#125;)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name=$name,age=$age,gender=$gender"</span>);</span><br><span class="line">    printPersion2(<span class="string">'name'</span>,<span class="number">18</span>,<span class="string">'zhang'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 基于位置</span></span><br><span class="line">printPersion2(<span class="built_in">String</span> name,[<span class="built_in">int</span> age,<span class="built_in">String</span> gender])&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name=$name,age=$age,gender=$gender"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>默认参数值<ul><li>使用=在可选参数指定默认值</li><li>默认值只能是编译时常量</li></ul></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    printPersion(<span class="string">'张三'</span>); <span class="comment">// name=张三,age=null,gender=null</span></span><br><span class="line">    printPersion(<span class="string">'lisi'</span>,age:<span class="number">20</span>); <span class="comment">// name=lisi,age=20,gender=null</span></span><br><span class="line">    printPersion(<span class="string">'name'</span>,age:<span class="number">20</span>,gender:<span class="string">"Male"</span>); <span class="comment">// name=name,age=20,gender=Male</span></span><br><span class="line">&#125;</span><br><span class="line">printPersion(<span class="built_in">String</span> name,&#123;<span class="built_in">int</span> age=<span class="number">20</span>,<span class="built_in">String</span> gender=“张三”&#125;)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name=$name,age=$age,gender=$gender"</span>);</span><br><span class="line">    printPersion2(<span class="string">'name'</span>,<span class="number">18</span>,<span class="string">'zhang'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>方法对象<ul><li>方法可作为对象赋值给其它变量</li><li>方法可作为参数传递给其它方法</li></ul></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    <span class="built_in">Function</span> func = printHello;</span><br><span class="line">    func();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> printHello()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法作为参数</span></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    <span class="keyword">var</span> list = [<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>];</span><br><span class="line">    <span class="built_in">print</span>(listTimes(list, times)); <span class="comment">// [hhh, eee, lll, lll, ooo]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">List</span> listTimes(<span class="built_in">List</span> list, <span class="built_in">String</span> f(str))&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>;index &lt;list.length;index++)&#123;</span><br><span class="line">        list[index] = f(list[index]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">String</span> times(str)&#123;</span><br><span class="line">    <span class="keyword">return</span> str *<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>匿名方法<ul><li>（参数1，参数2，。。。）{<br>  方法体。。<br>  return 返回值<br>}</li><li>匿名方法特性<ul><li>可赋值给变量，通过变量进行调用</li><li>可在其它方法中直接调用或者传递给其它方法</li></ul></li></ul></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    <span class="comment">// 不能写在外面</span></span><br><span class="line">    <span class="keyword">var</span> fn = (str)&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'hello-$str'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    fn(<span class="string">'world'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    <span class="keyword">var</span> list = [<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>];</span><br><span class="line">    listTimes(list, (str)&#123;str *<span class="number">3</span>&#125;);</span><br><span class="line">    listTimes2(list);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">List</span> listTimes(<span class="built_in">List</span> list, <span class="built_in">String</span> f(str))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>;index &lt;list.length;index++)&#123;</span><br><span class="line">            list[index] = f(list[index]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">List</span> listTimes2(<span class="built_in">List</span> list)&#123;</span><br><span class="line">        <span class="keyword">var</span> func = (str)&#123;<span class="keyword">return</span> str *<span class="number">3</span>&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>;index &lt;list.length;index++)&#123;</span><br><span class="line">            list[index] = func(list[index]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>闭包<ul><li>闭包是一个方法（对象）</li><li>闭包定义在其它方法内部</li><li>闭包能够访问外部方法内的局部变量，并持有其状态</li></ul></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> func = a();</span><br><span class="line">  func(); <span class="comment">// 0</span></span><br><span class="line">  func(); <span class="comment">//1</span></span><br><span class="line">  func(); <span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">var</span>  fn = b();</span><br><span class="line">  fn();</span><br><span class="line">  fn();</span><br><span class="line">  fn();</span><br><span class="line">&#125;</span><br><span class="line">a()&#123;</span><br><span class="line">  <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">  printCount()&#123;</span><br><span class="line">    <span class="built_in">print</span>(count++);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> printCount; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b()&#123;</span><br><span class="line">  <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 匿名函数闭包</span></span><br><span class="line">  <span class="keyword">return</span> ()&#123;</span><br><span class="line">    <span class="built_in">print</span>(count++);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h4><ul><li>类与对象，声明，创建及基本特性</li><li>构造方法及初始化列表</li><li>静态成员及对象操作符的使用<ol><li>类与对象</li></ol></li><li>使用关键字class声明一个类</li><li>使用关键字new创建一个对象，new可以省略</li><li>所有对象都继承于Object类</li></ul><ol start="2"><li>属性与方法</li></ol><ul><li>属性默认会生成getter和setter方法</li><li>使用final声明的属性只有getter方法</li><li>属性和方法通过.访问</li><li><p>方法不能被重载</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">  person.name = <span class="string">'zhangsan'</span>;</span><br><span class="line">  person.a = <span class="number">18</span>;</span><br><span class="line">  <span class="built_in">print</span>(person.name);</span><br><span class="line">  person.work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="built_in">int</span> a;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> address =<span class="string">'yyy'</span>;</span><br><span class="line"> <span class="keyword">void</span> work()&#123;</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">'姓名：$name,age$a'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>类及成员可见性</li></ol><ul><li>dart中的可见性以library（库）为单位</li><li>默认情况下，每个dart文件就是一个库</li><li>使用_表示库的私有性</li><li>使用import导入库<ol start="4"><li>计算属性</li></ol><ul><li>计算属性的值是通过计算而来的，本身不存储值</li><li>计算属性赋值，其实是通过计算转换到其它实例变量</li></ul></li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> rect = <span class="keyword">new</span> Rectangle();</span><br><span class="line">  rect.height = <span class="number">20</span>;</span><br><span class="line">  rect.width = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">print</span>(rect.aera);</span><br><span class="line">  rect.aera = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span></span>&#123;</span><br><span class="line">  <span class="built_in">num</span> width,height;</span><br><span class="line">  <span class="built_in">num</span> <span class="keyword">get</span> aera =&gt; width * height;</span><br><span class="line">      <span class="keyword">set</span> aera(value)&#123;</span><br><span class="line">        width = value / <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li><p>构造方法（创建对象时调用的方法）</p><ul><li>如果没有自定义构造方法，则会有个默认构造方法</li><li>如果存在自定义构造方法，则默认构造方法无效</li><li>构造方法不能重载</li><li>命名构造方法</li></ul><ul><li>使用命名构造方法，可以实现多个构造方法</li><li>使用类名.方法的形式实现</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="number">18</span>,<span class="string">'张三'</span>,<span class="string">'Male'</span>);</span><br><span class="line">  person.work();</span><br><span class="line">  <span class="keyword">new</span> Person.widthName(<span class="string">'sssss'</span>,<span class="string">'final'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"> <span class="built_in">int</span> age;</span><br><span class="line"> <span class="built_in">String</span> name;</span><br><span class="line"> <span class="keyword">final</span> <span class="built_in">String</span> Gender;</span><br><span class="line"> <span class="comment">// 默认构造函数</span></span><br><span class="line"><span class="comment">//  Person()&#123;&#125;</span></span><br><span class="line"><span class="comment">// 自定义构造函数</span></span><br><span class="line">  <span class="comment">// Person(int age,String name)&#123;</span></span><br><span class="line">  <span class="comment">//   this.age = age;</span></span><br><span class="line">  <span class="comment">//   this.name = name;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// 语法糖形式的构造函数，参数赋值在函数运行之前执行,所以可以给final赋值</span></span><br><span class="line">  Person(<span class="keyword">this</span>.age,<span class="keyword">this</span>.name,<span class="keyword">this</span>.Gender);</span><br><span class="line">  <span class="comment">// 多个构造方法的实现</span></span><br><span class="line">   Person.widthName(<span class="keyword">this</span>.name,<span class="keyword">this</span>.Gender);</span><br><span class="line">  work()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'姓名$name,年龄$age'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>常量构造方法(运行时更快，因为编译期已经确定)<ul><li>如果类是不可变状态，可以把对象定义为编译时常量</li><li>使用const声明构造方法，并且所以变量都为final</li><li>使用const声明对象，可以省略</li></ul></li></ol></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">const</span> person = <span class="keyword">const</span> <span class="keyword">new</span> Person(<span class="number">18</span>,<span class="string">'张三'</span>,<span class="string">'Male'</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"> <span class="keyword">final</span> <span class="built_in">int</span> age;</span><br><span class="line"> <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line"> <span class="keyword">final</span> <span class="built_in">String</span> Gender;</span><br><span class="line"> <span class="keyword">const</span> Person(<span class="keyword">this</span>.age,<span class="keyword">this</span>.name,<span class="keyword">this</span>.Gender);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>工厂构造方法<ul><li>工厂构造方法类似与设计模式中的工厂模式</li><li>在构造方法前添加关键字factory实现一个工厂构造方法</li><li>在工厂构造方法中可返回对象</li></ul></li><li>初始化列表<ul><li>初始化列表会在构造方法体执行前执行</li><li>使用逗号分隔初始化表达式</li><li>初始化列表常用于设置final变量的值</li></ul></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> gender;</span><br><span class="line">  Person(<span class="built_in">Map</span> map):name=map[<span class="string">'name'</span>],gender = map[<span class="string">'gender'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>静态成员<ul><li>使用static关键字来实现类级别的变量和函数</li><li>静态成员不能访问非静态成员，非静态成员可以访问静态成员</li><li>类中的常量需要使用static const声明</li></ul></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line"> <span class="keyword">var</span> page = <span class="keyword">new</span> Page();</span><br><span class="line"> Page.down();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">const</span> currentMax = <span class="number">20</span>;</span><br><span class="line"> <span class="keyword">static</span> <span class="built_in">int</span> currentPage = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">void</span> down()&#123;</span><br><span class="line">    currentPage = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'down'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> up()&#123;</span><br><span class="line">    currentPage ++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="10"><li>对象操作符<ul><li>条件成员访问：?.</li></ul></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line"> Person person;</span><br><span class="line"> <span class="comment">// 如果这个对象没有实例化就不往后执行，可以解决空指针异常</span></span><br><span class="line"> person?.work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> age = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">String</span> name = <span class="string">'zhan'</span>;</span><br><span class="line">  <span class="keyword">void</span> work()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'age$age'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类型转换：as</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">    <span class="comment">//person 类型不确定可以用as</span></span><br><span class="line"> <span class="keyword">var</span> person;</span><br><span class="line">     person = <span class="string">''</span>;</span><br><span class="line">     person = <span class="keyword">new</span> Person();</span><br><span class="line">     (person <span class="keyword">as</span> Person).work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> age = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">String</span> name = <span class="string">'zhan'</span>;</span><br><span class="line">  <span class="keyword">void</span> work()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'age$age'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>是否指定类型(is，is!)</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line"> <span class="keyword">var</span> person;</span><br><span class="line">     person = <span class="string">''</span>;</span><br><span class="line">     person = <span class="keyword">new</span> Person();</span><br><span class="line">     <span class="keyword">if</span>(person <span class="keyword">is</span> Person)&#123;</span><br><span class="line">        person.work();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> age = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">String</span> name = <span class="string">'zhan'</span>;</span><br><span class="line">  <span class="keyword">void</span> work()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'age$age'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>级联操作：..</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">new</span> Person()</span><br><span class="line">  ..age = <span class="number">12</span></span><br><span class="line">  ..name = <span class="string">'zhangsan'</span></span><br><span class="line">  ..work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">void</span> work()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'age-$age'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="11"><li>对象call方法<ul><li>如果类实现了call方法，则该类的对象可以作为方法使用</li></ul></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">  person.age = <span class="number">18</span>;</span><br><span class="line">  <span class="built_in">print</span>(person());</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">String</span> call()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'age-$age'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="面向对象扩展"><a href="#面向对象扩展" class="headerlink" title="面向对象扩展"></a>面向对象扩展</h5><ol><li>继承<ul><li>使用关键字extends继承一个类</li><li>子类会继承父类可见的属性和方法，不会继承构造方法</li><li>子类能够复写父类的方法，getter和setter</li><li>单继承，多态性</li></ul></li><li>继承中的构造方法<ul><li>子类的构造方法默认会调用父类的无名无参构造方法</li><li>如果父类没有无名无参构造放法，则需要显示调用父类构造方法</li><li>在构造方法参数后使用 ： 显示调用父类构造方法</li></ul></li><li>构造方法执行顺序<ul><li>父类的构造方法在子类构造方法体开始执行的位置调用</li><li>如果有初始化列表，初始化列表会在父类构造方法之前执行</li></ul></li><li>抽象类<ul><li>抽象类使用abstract表示，不能直接被实例化</li><li>抽象方法不用abstract修饰，无实现</li><li>抽象类可以没有抽象方法</li><li>有抽象方法的类一定得声明为抽象类</li></ul></li><li>接口<ul><li>类和接口是统一的，类就是接口</li><li>每个类都隐式的定义了一个包含所有实例成员的接口</li><li>如果是复用已有类的实现，使用继承（exdends）</li><li>如果只是使用已有类的外在行为，使用接口</li></ul></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">  person.run();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> <span class="keyword">get</span> age =&gt; <span class="number">18</span>;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'run Person..'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> implement age</span></span><br><span class="line">  <span class="built_in">int</span> <span class="keyword">get</span> age =&gt; <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement run</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>Mixins<ul><li>Mixins 类似于多继承，是在多类继承中重用一个类代码的方式</li></ul></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 多继承中有相同的方法，则优先执行类C中的方法</span></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">new</span> D();</span><br><span class="line">  d.a();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> a()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'A.a()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> b()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'B.b()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> a()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'B.a()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> c()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'C.c()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> a()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'c.a()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">A</span> <span class="title">with</span> <span class="title">B</span>,<span class="title">C</span>  </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>作为Mixins的类不能有显示声明构造方法</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">new</span> D();</span><br><span class="line">  d.a();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> a()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'A.a()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> b()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'B.b()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> a()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'B.a()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">  C()&#123;&#125;  <span class="comment">// 错误。不能有显示构造方法</span></span><br><span class="line">  <span class="keyword">void</span> c()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'C.c()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> a()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'c.a()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">A</span> <span class="title">with</span> <span class="title">B</span>,<span class="title">C</span>  </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>作为Mixins的类只能继承自Object</li><li>使用关键字with连接一个或多个Mixins</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br><span class="line">  car.work();</span><br><span class="line">  car.name = <span class="string">'轮胎'</span>;</span><br><span class="line">  car.run();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Engine</span></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Diandong</span> <span class="keyword">implements</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> work() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement work</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'diandong...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Caiyou</span> <span class="keyword">implements</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> work() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement work</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Caiyou'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tyre</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">void</span> run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'$name'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> = <span class="title">Tyre</span> <span class="title">with</span> <span class="title">Caiyou</span>;</span></span><br></pre></td></tr></table></figure><ol start="6"><li>操作符覆写（重载运算符）<ul><li>覆写操作符需要在类中定义<br>返回类型 operator 操作符（参数1，参数2…）{<br>  实现体<br>  return 返回值<br>}<ul><li>如果覆写==，还需要覆写对象的hashCode  getter方法 </li></ul></li></ul></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="number">20</span>);</span><br><span class="line">  <span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="number">21</span>);</span><br><span class="line">  <span class="built_in">print</span>(person1 &gt; person2);</span><br><span class="line">  person1.age;</span><br><span class="line">  <span class="built_in">print</span>(person1[<span class="string">'age'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  Person(<span class="keyword">this</span>.age);</span><br><span class="line">  <span class="built_in">bool</span>  <span class="keyword">operator</span> &gt; (Person person)&#123;</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">'this.age<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>'</span>);</span><br><span class="line">     <span class="built_in">print</span>(person.age);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age &gt; person.age;</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">int</span> <span class="keyword">operator</span> [] (<span class="built_in">String</span> str)&#123;</span><br><span class="line">    <span class="keyword">if</span>(str == <span class="string">'age'</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>枚举<ul><li>枚举是一种有穷序列集的数据类型</li><li>使用关键字enum定义一个枚举</li><li>常用于代替常量，控制语句等</li></ul></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Season &#123;</span><br><span class="line">    spring,</span><br><span class="line">    summer,</span><br><span class="line">    autumn,</span><br><span class="line">    winter</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    <span class="keyword">var</span> currentSeason = Season.autumn;</span><br><span class="line">    currentSeason.index <span class="comment">// 0</span></span><br><span class="line">    <span class="keyword">switch</span>(currentSeason)&#123;</span><br><span class="line">        <span class="keyword">case</span> Season.spring:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'1-3'</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Season.summer: </span><br><span class="line">             <span class="built_in">print</span>(<span class="string">'4-6'</span>);</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>dart 枚举特性<ul><li>index从0开始，依次累加</li><li>不能指定原始值</li><li>不能添加方法</li></ul><ol start="8"><li>泛型</li></ol></li><li>dart中类型是可选的，可使用泛型限定类型</li><li>使用泛型能够有效的减少代码重复</li><li>类的泛型</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> list = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">  list.add(<span class="string">'1'</span>);</span><br><span class="line">  <span class="keyword">var</span> utls = <span class="keyword">new</span> Utils&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">  utls.put(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Utils</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  T element;</span><br><span class="line">  <span class="keyword">void</span> put(T element)&#123;</span><br><span class="line">   <span class="keyword">this</span>.element = element;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>方法的泛型</li></ul><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> list = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">  list.add(<span class="string">'1'</span>);</span><br><span class="line">  <span class="keyword">var</span> utils = <span class="keyword">new</span> Utils();</span><br><span class="line">  utils.put&lt;<span class="built_in">String</span>&gt;(<span class="string">'string'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Utils</span></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> put&lt;T&gt;(T element)&#123;</span><br><span class="line">    <span class="built_in">print</span>(element);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;dart-概述&quot;&gt;&lt;a href=&quot;#dart-概述&quot; class=&quot;headerlink&quot; title=&quot;dart 概述&quot;&gt;&lt;/a&gt;dart 概述&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;dart 是Google发布的一门开源编程语言&lt;/li&gt;
&lt;li&gt;dart 初期目标是成
      
    
    </summary>
    
    
      <category term="dart" scheme="http://myzhangning.top/tags/dart/"/>
    
  </entry>
  
  <entry>
    <title>nuxtjs</title>
    <link href="http://myzhangning.top/2019/01/01/nuxtjs/"/>
    <id>http://myzhangning.top/2019/01/01/nuxtjs/</id>
    <published>2019-01-01T13:35:01.000Z</published>
    <updated>2019-01-01T14:52:35.933Z</updated>
    
    <content type="html"><![CDATA[<h5 id="nuxt-js-工作流"><a href="#nuxt-js-工作流" class="headerlink" title="nuxt.js 工作流"></a>nuxt.js 工作流</h5><img src="/2019/01/01/nuxtjs/nuxtjsyuanli.png" title="nuxtjs工作流"><ol><li>Incoming Request 浏览器发起请求</li><li>nuxtServerInit 服务端接受请求检查nuxtServerInit配置项是否存在，Strore action 用来操作vuex</li><li>middleware 中间件</li><li>validate() 配合高级路由做动态验证 例如页面是否可以跳转</li><li>asyncDate() &amp; fetch() 用来获取数据<br> asyncDate() 获取的数据用于渲染vue组件<br> fetch() 用于修改vuex的</li><li>Render 渲染</li></ol><h5 id="nuxtjs-安装-（Nuxt-js-with-Koa）"><a href="#nuxtjs-安装-（Nuxt-js-with-Koa）" class="headerlink" title="nuxtjs 安装 （Nuxt.js with Koa）"></a>nuxtjs 安装 （Nuxt.js with Koa）</h5><ol><li>网址：<a href="https://github.com/nuxt-community/koa-template" target="_blank" rel="noopener">https://github.com/nuxt-community/koa-template</a></li><li>vue init nuxt-community/koa-template nuxt-pro<h5 id="nuxtjs-目录"><a href="#nuxtjs-目录" class="headerlink" title="nuxtjs 目录"></a>nuxtjs 目录</h5><img src="/2019/01/01/nuxtjs/directory.png" title="nuxtjs目录"></li><li>backpack.config.js 后端编译脚本</li><li>build 编译完后的目录</li><li>components 放置vue组件</li><li>layouts 模版</li><li>pages 页面入口</li><li>server koa相关的程序</li><li>stroe vuex目录，有这个目录就会默认启用vuex（创建即配置）</li><li>npm install eslint-plugin-html@^3 (如eslint报错)</li><li>路由：创建一个页面，文件名即是路由（创建即配置）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;nuxt-js-工作流&quot;&gt;&lt;a href=&quot;#nuxt-js-工作流&quot; class=&quot;headerlink&quot; title=&quot;nuxt.js 工作流&quot;&gt;&lt;/a&gt;nuxt.js 工作流&lt;/h5&gt;&lt;img src=&quot;/2019/01/01/nuxtjs/nuxtjsyu
      
    
    </summary>
    
    
      <category term="vuejs" scheme="http://myzhangning.top/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>vue3.0</title>
    <link href="http://myzhangning.top/2018/12/19/vue3/"/>
    <id>http://myzhangning.top/2018/12/19/vue3/</id>
    <published>2018-12-19T15:00:00.000Z</published>
    <updated>2019-01-01T13:49:16.533Z</updated>
    
    <content type="html"><![CDATA[<h5 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h5><ol><li>npm install -g @vue/cli   # OR yarn global add @vue/cli<h5 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h5></li><li>vue -V<h5 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h5></li><li>vue create vue-style<h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5></li><li>npm run serve<h5 id="路由安装与配置"><a href="#路由安装与配置" class="headerlink" title="路由安装与配置"></a>路由安装与配置</h5></li><li>npm i vue-router</li><li>src 下创建router.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> pageA <span class="keyword">from</span> <span class="string">'a.vue'</span></span><br><span class="line"><span class="keyword">import</span> pageB <span class="keyword">from</span> <span class="string">'b.vue'</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'pageA'</span>,</span><br><span class="line">        component: pageA</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"><span class="comment">//main.js 中</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br><span class="line"><span class="comment">// 根目录下创建vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    runtimeCompiler: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// public/index.html</span></span><br><span class="line">   &lt;div id=<span class="string">'app'</span>&gt;</span><br><span class="line">       &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">   &lt;div&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;npm install -g @vue/cli   # OR yarn global add @vue/cli&lt;
      
    
    </summary>
    
    
      <category term="vuejs" scheme="http://myzhangning.top/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>23种设计模式介绍</title>
    <link href="http://myzhangning.top/2018/10/16/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D/"/>
    <id>http://myzhangning.top/2018/10/16/23种设计模式介绍/</id>
    <published>2018-10-16T09:00:00.000Z</published>
    <updated>2018-10-25T13:48:20.415Z</updated>
    
    <content type="html"><![CDATA[<h5 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h5><ol><li>工厂模式 （工厂方法模式、抽象工厂模式、建造者模式–js并没有分那么清）</li></ol><ul><li>将new操作单独封装</li><li>遇到new时就要考虑是否使用工厂模式</li></ul><p>使用场景:</p><ul><li>JQuery()-$(‘div’)</li><li>React.createElement</li><li>vue异步组件</li><li>vuex 和redux 中的 store</li></ul><p>使用场景验证:</p><ul><li>构造函数和创建者分离</li><li>符合开放封闭原则<br>代码示例:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂模式 不用new 直接使用，内部实现new</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    init()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'init'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator</span></span>&#123;</span><br><span class="line">   create()&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Product(name)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> name = <span class="keyword">new</span> Creator(<span class="string">'p1'</span>)</span><br><span class="line"> <span class="keyword">let</span> a = name.create()</span><br><span class="line"> a.init()</span><br></pre></td></tr></table></figure><ol start="2"><li>单例模式</li></ol><ul><li>系统中被唯一使用</li><li>一个类只有一个实例<br>理解：如果有了直接用，没有的话去做初始化操作，保证只有一个实例<br>使用场景验证:</li><li>符合单一职责原则，只实例化唯一的对象</li><li>没法具体开放封闭原则，但是绝对不违反开放封闭原则<br>代码示例:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SingleObject1</span></span>&#123;</span><br><span class="line">     login()&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'login..'</span>)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 自执行函数，防治Instence变量污染</span></span><br><span class="line"> SingleObject1.getInstence = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">let</span> Instence</span><br><span class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(!Instence)&#123;</span><br><span class="line">             Instence = <span class="keyword">new</span> SingleObject1()</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> SingleObject1</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;)()</span><br><span class="line"><span class="keyword">let</span> obj1 = SingleObject1.getInstence()</span><br><span class="line">obj1.login()</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>原型模式</li></ol><h5 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h5><ol><li>适配器模式</li></ol><ul><li>旧接口格式与使用者不兼容</li><li>中间加一个适配转换接口</li></ul><ol start="2"><li>装饰器模式</li></ol><ul><li>为对象添加新功能</li><li>不改变原有的结构和功能<br>使用场景:</li><li>ES7 装饰器</li><li>core-decorators(js库)<br>代码示例:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 装饰器模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line">   draw()&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'画一个圆'</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(circle)&#123;</span><br><span class="line">        <span class="keyword">this</span>.circle = circle</span><br><span class="line">    &#125;</span><br><span class="line">    draw()&#123;</span><br><span class="line">        <span class="keyword">this</span>.circle.draw()</span><br><span class="line">        <span class="keyword">this</span>.setReader(circle)</span><br><span class="line">    &#125;</span><br><span class="line">    setReader(circle)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'设置边框'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> circle = <span class="keyword">new</span> Circle()</span><br><span class="line">circle.draw()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'------------------'</span>)</span><br><span class="line"><span class="keyword">let</span> dec = <span class="keyword">new</span> Decorator(circle)</span><br><span class="line">dec.draw()</span><br><span class="line"></span><br><span class="line"><span class="comment">//装饰器的原理</span></span><br><span class="line">@decorator</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line">A = decorator(A) || A;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>代理模式</li><li>外观模式</li></ol><ul><li>为子系统中的一组接口提供了一个高层接口</li><li>使用者使用这个高级接口<br>使用场景验证:</li><li>不符合单一职责原则和开放封闭原则，因此谨慎使用，不可滥用</li></ul><ol start="5"><li>桥接模式</li><li>组合模式</li><li>享元模式<h5 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h5></li><li>策略模式</li><li>模板方法模式</li><li>观察者模式</li></ol><ul><li>发布 &amp;订阅</li><li>一对多<br>使用场景:</li><li>网页事件绑定</li><li>Promise</li><li>jquery Callbacks<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> callback = $.Callbacks()</span><br><span class="line">callback.add(<span class="function"><span class="keyword">function</span>(<span class="params">info</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn1'</span>,info)</span><br><span class="line">&#125;)</span><br><span class="line">callback.add(<span class="function"><span class="keyword">function</span>(<span class="params">info</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn2'</span>,info)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 添加订阅者</span></span><br><span class="line">callback.fire(<span class="string">'iii'</span>)</span><br></pre></td></tr></table></figure></li></ul><p>代码示例:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发布者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="number">0</span></span><br><span class="line">        <span class="comment">//订阅者集合</span></span><br><span class="line">        <span class="keyword">this</span>.observers = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取发布状态</span></span><br><span class="line">    getState()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.state</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发布状态</span></span><br><span class="line">    setState(state)&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state</span><br><span class="line">        <span class="comment">// 通知订阅者做更新</span></span><br><span class="line">       <span class="keyword">this</span>.notifyObserver()</span><br><span class="line">    &#125;</span><br><span class="line">    notifyObserver()&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.forEach(<span class="function"><span class="params">observer</span> =&gt;</span>&#123;</span><br><span class="line">            observer.updated()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把订阅的人员push进数组</span></span><br><span class="line">    attach(observer)&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.push(observer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 订阅者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,subject)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.subject = subject</span><br><span class="line">        <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    updated()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>-uptate,state:<span class="subst">$&#123;<span class="keyword">this</span>.subject.getState()&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Subject()</span><br><span class="line"><span class="keyword">let</span> o1 = <span class="keyword">new</span> Observer(<span class="string">'zhangsan'</span>,s)</span><br><span class="line">s.setState(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><ul><li>nodejs 自定义事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Emitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter</span><br><span class="line"><span class="keyword">const</span> emitter1 = <span class="keyword">new</span> Emitter()</span><br><span class="line">emitter1.on(<span class="string">'some'</span>,(info)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'f1'</span>,info)</span><br><span class="line">&#125;)</span><br><span class="line">emitter1.on(<span class="string">'some'</span>,(info)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'f2'</span>,info)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 订阅者</span></span><br><span class="line">emitter1.emit(<span class="string">'some'</span>,<span class="string">'yyy'</span>)</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>迭代器模式</li><li>职责链模式</li><li>命令模式</li><li>备忘录模式</li><li>状态模式</li><li>访问者模式</li><li>中介者模式</li><li>解释器模式 </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;创建型&quot;&gt;&lt;a href=&quot;#创建型&quot; class=&quot;headerlink&quot; title=&quot;创建型&quot;&gt;&lt;/a&gt;创建型&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;工厂模式 （工厂方法模式、抽象工厂模式、建造者模式–js并没有分那么清）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;将ne
      
    
    </summary>
    
    
      <category term="Javascript设计模式" scheme="http://myzhangning.top/tags/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>SOLID五大设计原则</title>
    <link href="http://myzhangning.top/2018/10/15/solid%E4%BA%94%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>http://myzhangning.top/2018/10/15/solid五大设计原则/</id>
    <published>2018-10-15T07:00:00.000Z</published>
    <updated>2018-10-18T16:05:15.744Z</updated>
    
    <content type="html"><![CDATA[<h5 id="五大设计原则"><a href="#五大设计原则" class="headerlink" title="五大设计原则"></a>五大设计原则</h5><ol><li>S - 单一职责原则 The Single-Responsibility Principle (SRP)</li></ol><ul><li>一个程序只做好一件事</li><li>如果功能过于复杂就拆分开，每个部分保持独立</li></ul><ol start="2"><li>o - 开放封闭原则 The Open/Closed Principle (OCP)</li></ol><ul><li>对扩展开放，对修改封闭</li><li>增加需求时，扩展新代码，而非修改已有代码</li><li>这是软件设计的终极目标</li></ul><ol start="3"><li>L - 李氏置换原则 The Liskov Substitution Principle (LSP)</li></ol><ul><li>子类能覆盖父类</li><li>父类能出现的地方子类就能出现</li><li>js 中使用较少（弱类型 &amp; 继承使用较少）</li></ul><ol start="4"><li>I - 接口独立原则 The Interface Segregation Principle (ISP)</li></ol><ul><li>保持接口的单一独立，避免出现“胖接口”</li><li>js中没有接口（typescript例外），使用较少</li><li>类似于单一职责原则，这里更关注接口</li></ul><ol start="5"><li>D - 依赖导致原则 The Dependency-Inversion Principle (DIP)</li></ol><ul><li>面向接口编程，依赖于抽象而不依赖于具体</li><li>使用方只关注接口而不关注具体类的实现</li><li>js使用较少（没有接口 &amp; 弱类型）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;五大设计原则&quot;&gt;&lt;a href=&quot;#五大设计原则&quot; class=&quot;headerlink&quot; title=&quot;五大设计原则&quot;&gt;&lt;/a&gt;五大设计原则&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;S - 单一职责原则 The Single-Responsibility Principle (
      
    
    </summary>
    
      <category term="JavaScript设计模式" scheme="http://myzhangning.top/categories/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Javascript设计模式" scheme="http://myzhangning.top/tags/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>UML类图</title>
    <link href="http://myzhangning.top/2018/10/13/%08UML_leitu/"/>
    <id>http://myzhangning.top/2018/10/13/UML_leitu/</id>
    <published>2018-10-13T15:00:00.000Z</published>
    <updated>2018-10-18T15:56:35.236Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Unified-Modeling-Language-统一建模语言"><a href="#Unified-Modeling-Language-统一建模语言" class="headerlink" title="Unified Modeling Language 统一建模语言"></a>Unified Modeling Language 统一建模语言</h4><h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><pre><code>名字-&gt;属性-&gt;方法</code></pre><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><ol><li>泛化，表示继承</li><li>关联，表示引用</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Unified-Modeling-Language-统一建模语言&quot;&gt;&lt;a href=&quot;#Unified-Modeling-Language-统一建模语言&quot; class=&quot;headerlink&quot; title=&quot;Unified Modeling Language 统一
      
    
    </summary>
    
      <category term="JavaScript设计模式" scheme="http://myzhangning.top/categories/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>面向对象</title>
    <link href="http://myzhangning.top/2018/10/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://myzhangning.top/2018/10/11/面向对象/</id>
    <published>2018-10-11T12:30:00.000Z</published>
    <updated>2018-10-18T15:56:08.778Z</updated>
    
    <content type="html"><![CDATA[<h3 id="面向对象三要素"><a href="#面向对象三要素" class="headerlink" title="面向对象三要素"></a>面向对象三要素</h3><ol><li>继承 – 子类继承父类</li><li>封装 – 数据的封装和保密 (继承可将公共方法抽离出来，提高复用，减少冗余，不该外漏的不外漏)<br> public 完全开放       protected 对子类开放<br> private 对自己开放，私有的<br> ES6 尚不支持，可以用typescript 演示</li><li>多态 – 同一接口不同实现<br> js 应用极少，需要结合Java 等语言的接口、重写、重载等功能<h3 id="为什么要使用面向对象"><a href="#为什么要使用面向对象" class="headerlink" title="为什么要使用面向对象"></a>为什么要使用面向对象</h3><ol><li>程序执行:顺序、判断、循环— 结构化</li><li>面向对象—-数据结构化</li><li>对于计算机，结构化的才是最简单的</li><li>编程应该 简单&amp;抽象</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;面向对象三要素&quot;&gt;&lt;a href=&quot;#面向对象三要素&quot; class=&quot;headerlink&quot; title=&quot;面向对象三要素&quot;&gt;&lt;/a&gt;面向对象三要素&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;继承 – 子类继承父类&lt;/li&gt;
&lt;li&gt;封装 – 数据的封装和保密 (继承可将公共方法
      
    
    </summary>
    
      <category term="JavaScript设计模式" scheme="http://myzhangning.top/categories/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>h5远程调试</title>
    <link href="http://myzhangning.top/2018/09/18/h5debug/"/>
    <id>http://myzhangning.top/2018/09/18/h5debug/</id>
    <published>2018-09-18T09:30:00.000Z</published>
    <updated>2018-09-19T15:34:56.813Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Weinre"><a href="#Weinre" class="headerlink" title="Weinre"></a>Weinre</h4><ol><li>Weinre(Web Inspector Remote)是一款基于Web Inspector(Webkit)的远程调试工具， 它使用JS编写， 可以让我们在电脑上直接调试运行在手机上的远程页面。 与传统的Web Inspector的使用场景不同， 调试的页面在手机上， 调试工具在PC的chrome， 二者通过网络连接通信。<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4></li><li>Weinre是基于nodejs实现的， 使用它必须先安装node运行环境，如果你是Mac/Linux用户， 还需要在前面加入”sudo”:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sudo] npm -g install weinre</span><br></pre></td></tr></table></figure></li></ol><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weinre --httpPort 8082 --boundHost -all-</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Weinre&quot;&gt;&lt;a href=&quot;#Weinre&quot; class=&quot;headerlink&quot; title=&quot;Weinre&quot;&gt;&lt;/a&gt;Weinre&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Weinre(Web Inspector Remote)是一款基于Web Inspector(W
      
    
    </summary>
    
      <category term="HTML5" scheme="http://myzhangning.top/categories/HTML5/"/>
    
    
  </entry>
  
  <entry>
    <title>videojs 使用小结</title>
    <link href="http://myzhangning.top/2018/09/18/videojs/"/>
    <id>http://myzhangning.top/2018/09/18/videojs/</id>
    <published>2018-09-18T08:24:00.000Z</published>
    <updated>2018-09-19T15:26:04.886Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li>videojs初始化完毕后，.vjs-tech 为DOM结构里的实际的video标签</li><li>videojs 的初始化参数有多重配置方式，建议以标签属性的方式来配置</li><li>x5 开头的标签只对腾讯 x5 内核的浏览器有效，即微信、QQ浏览器，所有的属性见 <a href="https://x5.tencent.com/tbs/guide/video.html" target="_blank" rel="noopener">H5同层播放器接入规范</a></li><li>不自动全屏播放设置 webkit-playsinline playsinline x5-playsinline</li><li>【安卓】启用H5同层播放器 x5-video-player-type=”h5” 启用后微信、QQ浏览器里，不会使用腾讯的默认播放器。这里如果不启用，则使用腾讯的播放器，videojs 控制不了，会显示播放控件，如果启用了，则使用          html5 默认行为来播放，videojs 可以控制，但一定会全屏播放</li><li><a href="https://videojs.com" target="_blank" rel="noopener">videojs官网</a> </li><li><a href="https://github.com/videojs" target="_blank" rel="noopener">videojs Github</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;videojs初始化完毕后，.vjs-tech 为DOM结构里的实际的video标签&lt;/li&gt;
&lt;li&gt;videojs 的初始化
      
    
    </summary>
    
      <category term="h5直播" scheme="http://myzhangning.top/categories/h5%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="h5直播" scheme="http://myzhangning.top/tags/h5%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>http2优势</title>
    <link href="http://myzhangning.top/2018/09/02/http2/"/>
    <id>http://myzhangning.top/2018/09/02/http2/</id>
    <published>2018-09-02T08:30:00.000Z</published>
    <updated>2018-09-02T09:15:47.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信道复用"><a href="#信道复用" class="headerlink" title="信道复用"></a>信道复用</h1><h1 id="分帧传输"><a href="#分帧传输" class="headerlink" title="分帧传输"></a>分帧传输</h1><ol><li>http2的分帧传输，在同一个连接上面可以并发的发送不同的请求</li><li>传输的一个http数据并不需要一定按照连续的顺序进行发送，而是可以分成不同的帧，然后一起进行发送，如果中间部分先到服务器也没关系，最后会把数据接收完之后，根据一个帧信息里面包含的先后顺序，在进行组合，拿到一个真正的数据</li></ol><h1 id="server-push"><a href="#server-push" class="headerlink" title="server push"></a>server push</h1><ol><li>传统的http1.1中客户端是主动的，服务端是被动的</li><li>在http1.1中如果一个页面加载过来有很多资源，比如图片，css，js 这些请求是并发的去发送，并发的过程中需要创建并发的http连接，浏览器有并发限制，像Chrome中只有6个，如果一次并发超过6个剩下的一些需要等待前6个拿到服务器的返回之后，才能继续发送请求，所以这个时候就会变成相对串行的操作，效率就不是很高</li><li>建立不同的连接，如果有一起创建6个tcp连接，需要进行tcp的6次三次握手，创建连接的开销是比较大的，同时对于一个服务器来讲，他可以创建的tcp连接数是有一个上限的，所以每次都创建6个tcp连接，会导致服务器的tcp连接数很快的消耗完，所以在http1.1中受到很大的制约</li></ol><h1 id="为什么不能在一个tcp连接上面去发送请求呢？"><a href="#为什么不能在一个tcp连接上面去发送请求呢？" class="headerlink" title="为什么不能在一个tcp连接上面去发送请求呢？"></a>为什么不能在一个tcp连接上面去发送请求呢？</h1><ol><li>在http1.1中发送请求，在tcp连接上发送数据是必须要发送完一个请求后，在发送第二个请求，同时服务端返回也是要把前一个请求的数据全部返回之后，才能返回第二个数据，也就是第一个数据请求特别慢，第二个请求比他先执行完成，但还是会等第一个请求执行完成，才能返回，所以如果复用一个tcp连接，在http1.1中，其实是一个串行的过程，而不是一个并行的过程，所以效率比较低</li><li>在http2中得意于信道复用和分帧传输的好处，所以网站开启http2之后我们每个用户访问我们的网站他永远只需要创建一个tcp连接，因为在这个tcp连接上面，我们完全可以并发的发送，并发的返回，没有一个阻塞的过程，同时服务端还可以根据需求主动的响应用户推送一些消息</li><li>http2是由谷歌之前开发的spdy的一个协议演化而来的，spdy需要使用https，所以目前仅支持https</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;信道复用&quot;&gt;&lt;a href=&quot;#信道复用&quot; class=&quot;headerlink&quot; title=&quot;信道复用&quot;&gt;&lt;/a&gt;信道复用&lt;/h1&gt;&lt;h1 id=&quot;分帧传输&quot;&gt;&lt;a href=&quot;#分帧传输&quot; class=&quot;headerlink&quot; title=&quot;分帧传输&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="http协议" scheme="http://myzhangning.top/categories/http%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="http协议" scheme="http://myzhangning.top/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>http三次握手</title>
    <link href="http://myzhangning.top/2018/08/28/threeHands/"/>
    <id>http://myzhangning.top/2018/08/28/threeHands/</id>
    <published>2018-08-28T15:40:00.000Z</published>
    <updated>2018-08-28T15:32:42.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http-与-tcp之间的关系"><a href="#http-与-tcp之间的关系" class="headerlink" title="http 与 tcp之间的关系"></a>http 与 tcp之间的关系</h1><p>   user 通过（http）–&gt; tcp Connection –&gt; 服务端<br>   三次握手的主要原因是规避网络传输当中延时导致的一些服务器开销的问题</p><h1 id="三次握手时序图"><a href="#三次握手时序图" class="headerlink" title="三次握手时序图"></a>三次握手时序图</h1><img src="/2018/08/28/threeHands/hands.png" title="三次握手时序图">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http-与-tcp之间的关系&quot;&gt;&lt;a href=&quot;#http-与-tcp之间的关系&quot; class=&quot;headerlink&quot; title=&quot;http 与 tcp之间的关系&quot;&gt;&lt;/a&gt;http 与 tcp之间的关系&lt;/h1&gt;&lt;p&gt;   user 通过（http）–&amp;
      
    
    </summary>
    
      <category term="http协议" scheme="http://myzhangning.top/categories/http%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="http协议" scheme="http://myzhangning.top/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>http协议历史</title>
    <link href="http://myzhangning.top/2018/08/27/http-history/"/>
    <id>http://myzhangning.top/2018/08/27/http-history/</id>
    <published>2018-08-27T15:56:19.000Z</published>
    <updated>2018-08-27T16:17:40.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http-0-9"><a href="#http-0-9" class="headerlink" title="http/0.9"></a>http/0.9</h1><pre><code>只有一个命令GET,没有HEADER等描述数据的信息，服务器发送完数据，就关闭tcp连接tcp连接与http连接：    一个tcp连接可以对应几个http请求，一个http请求是在某一个tcp连接中进行发送</code></pre><h1 id="http-1-0"><a href="#http-1-0" class="headerlink" title="http/1.0"></a>http/1.0</h1><pre><code>增加了很多命令，增加status code 和header，多字符集支持，多部分发送，权限，缓存等</code></pre><h1 id="http-1-1"><a href="#http-1-1" class="headerlink" title="http/1.1"></a>http/1.1</h1><pre><code>持久连接，增加host和其他一些命令（host可以在同一台服务器建立多个web服务）</code></pre><h1 id="http2-主要解决http中性能问题"><a href="#http2-主要解决http中性能问题" class="headerlink" title="http2(主要解决http中性能问题)"></a>http2(主要解决http中性能问题)</h1><pre><code>一、所有数据以二进制传输（帧）二、同一个连接里发送多个请求不在需要按照顺序来（提高传输效率）三、头信息压缩（减小带宽使用）以及推送（服务端可以主动发起数据传输）等提高效率的功能例如：web页面都有html，css，js文件，需要先请求到html文本然后在浏览器中运行解析完成以后，我们才能发送css，js请求，有了推送这个功能以后，可以在请求html的同时，主动把css，js文件推送给客户端，这样是一个并行发送的关系，而不是串行的，整体传输效率、性能会很高</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http-0-9&quot;&gt;&lt;a href=&quot;#http-0-9&quot; class=&quot;headerlink&quot; title=&quot;http/0.9&quot;&gt;&lt;/a&gt;http/0.9&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;只有一个命令GET,没有HEADER等描述数据的信息，服务器发送完数据，就关
      
    
    </summary>
    
      <category term="http协议" scheme="http://myzhangning.top/categories/http%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="http协议" scheme="http://myzhangning.top/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>http协议基础及历史</title>
    <link href="http://myzhangning.top/2018/08/27/http-protocol-and-history/"/>
    <id>http://myzhangning.top/2018/08/27/http-protocol-and-history/</id>
    <published>2018-08-27T15:41:02.000Z</published>
    <updated>2018-08-27T15:54:51.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五层协议"><a href="#五层协议" class="headerlink" title="五层协议"></a>五层协议</h1><img src="/2018/08/27/http-protocol-and-history/tcp-ip.png" title="五层协议示意图"><ol><li>物理层主要作用是定义物理设备如何传输数据（光缆）</li><li>数据链路层在通信的实体间建立数据链路连接</li><li>网络层为数据在结点之间传输创建逻辑链路</li><li>传输层向用户提供可靠的端到端（End-to-End）服务</li><li>传输层向高层屏蔽了下层数据通信的细节（例如：ajax post传输数据，这个数据大时一次性传输不完，如何进行传输，如何可靠的把信息传输给服务器，服务器返回的信息又如何可靠的被我们拿到，都是传输层实现的）</li><li>应用层为应用软件提供了很多服务，构建于tcp/ip协议之上屏蔽网络传输层相关细节</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;五层协议&quot;&gt;&lt;a href=&quot;#五层协议&quot; class=&quot;headerlink&quot; title=&quot;五层协议&quot;&gt;&lt;/a&gt;五层协议&lt;/h1&gt;&lt;img src=&quot;/2018/08/27/http-protocol-and-history/tcp-ip.png&quot; title
      
    
    </summary>
    
      <category term="http协议" scheme="http://myzhangning.top/categories/http%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="http协议" scheme="http://myzhangning.top/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>直播源的制作</title>
    <link href="http://myzhangning.top/2018/08/26/makeLive/"/>
    <id>http://myzhangning.top/2018/08/26/makeLive/</id>
    <published>2018-08-26T09:40:00.000Z</published>
    <updated>2018-08-26T12:14:33.631Z</updated>
    
    <content type="html"><![CDATA[<ol><li>安装nginx<br> brew tap denji/homebrew-nginx<br> brew install nginx-full –with-rtmp-module</li><li>安装ffmpeg<br> brew install ffmpeg</li><li><p>找到nginx 安装目录修改配置<br>配置Nginx,支持http协议拉流</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location /hls &#123;</span><br><span class="line">    #Serve HLS config</span><br><span class="line">    types &#123;</span><br><span class="line">        application/vnd.apple.mpegurl    m3u8;</span><br><span class="line">        video/mp2t ts;</span><br><span class="line">    &#125;</span><br><span class="line">    root /usr/local/var/www;</span><br><span class="line">    add_header Cache-Control    no-cache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 配置Nginx，支持rtmp协议推流</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    rtmp &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 1935;</span><br><span class="line">        application rtmplive &#123;</span><br><span class="line">            live on;</span><br><span class="line">            max_connections 1024;</span><br><span class="line">        &#125;</span><br><span class="line">        application hls&#123;</span><br><span class="line">            live on;</span><br><span class="line">            hls on;</span><br><span class="line">            hls_path /usr/local/var/www/hls;</span><br><span class="line">            hls_fragment 1s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>找测试源<br> cd test.mp4</p></li><li>启动nginx<br>nginx</li><li>推流至RTMP到服务器<br> ffmpeg -re -i test-2.mp4 -vcodec libx264 -acodec aac -f flv rtmp://localhost:1935/rtmplive/rtmp<br> 测试：<pre><code>下载vlc file=》open network 输入rtmp://localhost:1935/rtmplive/rtmp</code></pre></li><li>推流至HLS到服务器<br> ffmpeg -re -i test-2.mp4 -vcodec libx264 -acodec aac -f flv rtmp://localhost:1935/hls/strem<br> 测试： <pre><code>打开safari浏览器输入 localhost:1935/hls/strem.m3u8</code></pre></li><li>提示<br> 所有操作均在mac下</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;安装nginx&lt;br&gt; brew tap denji/homebrew-nginx&lt;br&gt; brew install nginx-full –with-rtmp-module&lt;/li&gt;
&lt;li&gt;安装ffmpeg&lt;br&gt; brew install ffmpeg&lt;/
      
    
    </summary>
    
      <category term="h5直播" scheme="http://myzhangning.top/categories/h5%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="h5直播" scheme="http://myzhangning.top/tags/h5%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>h5直播</title>
    <link href="http://myzhangning.top/2018/08/08/h5_1/"/>
    <id>http://myzhangning.top/2018/08/08/h5_1/</id>
    <published>2018-08-07T16:59:49.000Z</published>
    <updated>2018-08-07T16:54:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="直播原理"><a href="#直播原理" class="headerlink" title="直播原理"></a>直播原理</h1><img src="/2018/08/08/h5_1/yuanli.png" title="h5直播原理"><ol><li>收集完是流的形式（原始二进制数据流）</li><li>原始的流是不可以进行播放的，必须采用协议做编码</li><li>H.264 视频编码，AAC 为音频编码</li></ol><h1 id="视频格式"><a href="#视频格式" class="headerlink" title="视频格式"></a>视频格式</h1><img src="/2018/08/08/h5_1/视频格式.png" title="视频格式"><ol><li>mp4 兼容性好 IE,chrome,Firfox,safari 都支持</li><li>webm(yourtobe) chrome,Firfox 支持 IE,safari 不支持 webm是一种流式的视频格式</li><li>hls（.ts格式） Safari支持，苹果自己的协议</li><li>flv（.flv格式）早期flash视频格式 如：b站</li></ol><h1 id="直播协议"><a href="#直播协议" class="headerlink" title="直播协议"></a>直播协议</h1><ol><li>HLS 协议</li><li>RTMP 协议</li><li>HTTP-FLV协议</li></ol><h1 id="播放器分为"><a href="#播放器分为" class="headerlink" title="播放器分为"></a>播放器分为</h1><ol><li>点播：如优酷看视频</li><li>直播：b站,斗鱼（live）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;直播原理&quot;&gt;&lt;a href=&quot;#直播原理&quot; class=&quot;headerlink&quot; title=&quot;直播原理&quot;&gt;&lt;/a&gt;直播原理&lt;/h1&gt;&lt;img src=&quot;/2018/08/08/h5_1/yuanli.png&quot; title=&quot;h5直播原理&quot;&gt;
&lt;ol&gt;
&lt;li&gt;收
      
    
    </summary>
    
      <category term="h5直播" scheme="http://myzhangning.top/categories/h5%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="h5直播" scheme="http://myzhangning.top/tags/h5%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>hls</title>
    <link href="http://myzhangning.top/2018/08/08/hls/"/>
    <id>http://myzhangning.top/2018/08/08/hls/</id>
    <published>2018-08-07T16:39:49.000Z</published>
    <updated>2018-08-07T16:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hls-协议"><a href="#hls-协议" class="headerlink" title="hls 协议"></a>hls 协议</h1><img src="/2018/08/08/hls/HLS协议.png" title="video拿到m3u8文件解析过程"><ol><li>HLS协议是苹果提出的直播协议</li><li>M3U8的每一个片段就是直播流的一个分段<br>总结： HLS协议的直播来说它是先发送一个M3U8文件，M3U8文件会有很多索引告诉你有几个片段，这时就能播放</li></ol><h1 id="M3U8-文件的更新"><a href="#M3U8-文件的更新" class="headerlink" title="M3U8 文件的更新"></a>M3U8 文件的更新</h1><ol><li>video会在某个时间段内重新请求M3U8文件（浏览器自己的行为）, 这时服务器会返回新的M3U8文件</li><li>M3U8文件有很多索引对应TS文件</li><li>M3U8文件可以嵌套M3U8文件</li></ol><h1 id="M3U8-文件嵌套"><a href="#M3U8-文件嵌套" class="headerlink" title="M3U8 文件嵌套"></a>M3U8 文件嵌套</h1><img src="/2018/08/08/hls/M3U8文件嵌套.png" title="M3U8文件嵌套示意图"><h1 id="M3U8文件的细分"><a href="#M3U8文件的细分" class="headerlink" title="M3U8文件的细分"></a>M3U8文件的细分</h1><img src="/2018/08/08/hls/m3u8文件细分.png" title="m3u8文件细分"><h1 id="M3U8-文件内容"><a href="#M3U8-文件内容" class="headerlink" title="M3U8 文件内容"></a>M3U8 文件内容</h1><img src="/2018/08/08/hls/m3u8动态文件内容.png" title="m3u8动态文件内容"><ol><li>#EXTM3U  动态列表文件如下：</li><li>#EXT-X-VERSIOIV:6 版本 （默认为3）</li><li>#EXT-X-TARGETDURATION: 时长</li><li>#EXT-X-MEDIA-SEQUENCE: 26 序号</li><li>EXTINF: 9.901 下面时长为多少<br> <a href="http://media.example.om/wifi/segment26.ts" target="_blank" rel="noopener">http://media.example.om/wifi/segment26.ts</a></li></ol><h1 id="ts-文件和mp4，webm，flv之间的区别"><a href="#ts-文件和mp4，webm，flv之间的区别" class="headerlink" title="ts 文件和mp4，webm，flv之间的区别"></a>ts 文件和mp4，webm，flv之间的区别</h1><img src="/2018/08/08/hls/ts文件.png" title="ts文件"><ol><li>RMT 会告诉哪个TS包是视频，哪些是音频</li><li>TS 文件先找PAT的包，PAT告诉PMT在哪里 PMT去找对应TS</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hls-协议&quot;&gt;&lt;a href=&quot;#hls-协议&quot; class=&quot;headerlink&quot; title=&quot;hls 协议&quot;&gt;&lt;/a&gt;hls 协议&lt;/h1&gt;&lt;img src=&quot;/2018/08/08/hls/HLS协议.png&quot; title=&quot;video拿到m3u8文件
      
    
    </summary>
    
      <category term="h5直播" scheme="http://myzhangning.top/categories/h5%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="h5直播" scheme="http://myzhangning.top/tags/h5%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
</feed>

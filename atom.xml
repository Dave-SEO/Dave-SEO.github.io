<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>永无止境</title>
  
  <subtitle>奋斗不息</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://myzhangning.top/"/>
  <updated>2018-09-02T09:15:47.307Z</updated>
  <id>http://myzhangning.top/</id>
  
  <author>
    <name>Dave-SEO</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>http2优势</title>
    <link href="http://myzhangning.top/2018/09/02/http2/"/>
    <id>http://myzhangning.top/2018/09/02/http2/</id>
    <published>2018-09-02T08:30:00.000Z</published>
    <updated>2018-09-02T09:15:47.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信道复用"><a href="#信道复用" class="headerlink" title="信道复用"></a>信道复用</h1><h1 id="分帧传输"><a href="#分帧传输" class="headerlink" title="分帧传输"></a>分帧传输</h1><ol><li>http2的分帧传输，在同一个连接上面可以并发的发送不同的请求</li><li>传输的一个http数据并不需要一定按照连续的顺序进行发送，而是可以分成不同的帧，然后一起进行发送，如果中间部分先到服务器也没关系，最后会把数据接收完之后，根据一个帧信息里面包含的先后顺序，在进行组合，拿到一个真正的数据</li></ol><h1 id="server-push"><a href="#server-push" class="headerlink" title="server push"></a>server push</h1><ol><li>传统的http1.1中客户端是主动的，服务端是被动的</li><li>在http1.1中如果一个页面加载过来有很多资源，比如图片，css，js 这些请求是并发的去发送，并发的过程中需要创建并发的http连接，浏览器有并发限制，像Chrome中只有6个，如果一次并发超过6个剩下的一些需要等待前6个拿到服务器的返回之后，才能继续发送请求，所以这个时候就会变成相对串行的操作，效率就不是很高</li><li>建立不同的连接，如果有一起创建6个tcp连接，需要进行tcp的6次三次握手，创建连接的开销是比较大的，同时对于一个服务器来讲，他可以创建的tcp连接数是有一个上限的，所以每次都创建6个tcp连接，会导致服务器的tcp连接数很快的消耗完，所以在http1.1中受到很大的制约</li></ol><h1 id="为什么不能在一个tcp连接上面去发送请求呢？"><a href="#为什么不能在一个tcp连接上面去发送请求呢？" class="headerlink" title="为什么不能在一个tcp连接上面去发送请求呢？"></a>为什么不能在一个tcp连接上面去发送请求呢？</h1><ol><li>在http1.1中发送请求，在tcp连接上发送数据是必须要发送完一个请求后，在发送第二个请求，同时服务端返回也是要把前一个请求的数据全部返回之后，才能返回第二个数据，也就是第一个数据请求特别慢，第二个请求比他先执行完成，但还是会等第一个请求执行完成，才能返回，所以如果复用一个tcp连接，在http1.1中，其实是一个串行的过程，而不是一个并行的过程，所以效率比较低</li><li>在http2中得意于信道复用和分帧传输的好处，所以网站开启http2之后我们每个用户访问我们的网站他永远只需要创建一个tcp连接，因为在这个tcp连接上面，我们完全可以并发的发送，并发的返回，没有一个阻塞的过程，同时服务端还可以根据需求主动的响应用户推送一些消息</li><li>http2是由谷歌之前开发的spdy的一个协议演化而来的，spdy需要使用https，所以目前仅支持https</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;信道复用&quot;&gt;&lt;a href=&quot;#信道复用&quot; class=&quot;headerlink&quot; title=&quot;信道复用&quot;&gt;&lt;/a&gt;信道复用&lt;/h1&gt;&lt;h1 id=&quot;分帧传输&quot;&gt;&lt;a href=&quot;#分帧传输&quot; class=&quot;headerlink&quot; title=&quot;分帧传输&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="http协议" scheme="http://myzhangning.top/categories/http%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="http协议" scheme="http://myzhangning.top/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>http三次握手</title>
    <link href="http://myzhangning.top/2018/08/28/threeHands/"/>
    <id>http://myzhangning.top/2018/08/28/threeHands/</id>
    <published>2018-08-28T15:40:00.000Z</published>
    <updated>2018-08-28T15:32:42.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http-与-tcp之间的关系"><a href="#http-与-tcp之间的关系" class="headerlink" title="http 与 tcp之间的关系"></a>http 与 tcp之间的关系</h1><p>   user 通过（http）–&gt; tcp Connection –&gt; 服务端<br>   三次握手的主要原因是规避网络传输当中延时导致的一些服务器开销的问题</p><h1 id="三次握手时序图"><a href="#三次握手时序图" class="headerlink" title="三次握手时序图"></a>三次握手时序图</h1><img src="/2018/08/28/threeHands/hands.png" title="三次握手时序图">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http-与-tcp之间的关系&quot;&gt;&lt;a href=&quot;#http-与-tcp之间的关系&quot; class=&quot;headerlink&quot; title=&quot;http 与 tcp之间的关系&quot;&gt;&lt;/a&gt;http 与 tcp之间的关系&lt;/h1&gt;&lt;p&gt;   user 通过（http）–&amp;
      
    
    </summary>
    
      <category term="http协议" scheme="http://myzhangning.top/categories/http%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="http协议" scheme="http://myzhangning.top/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>http协议历史</title>
    <link href="http://myzhangning.top/2018/08/27/http-history/"/>
    <id>http://myzhangning.top/2018/08/27/http-history/</id>
    <published>2018-08-27T15:56:19.000Z</published>
    <updated>2018-08-27T16:17:40.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http-0-9"><a href="#http-0-9" class="headerlink" title="http/0.9"></a>http/0.9</h1><pre><code>只有一个命令GET,没有HEADER等描述数据的信息，服务器发送完数据，就关闭tcp连接tcp连接与http连接：    一个tcp连接可以对应几个http请求，一个http请求是在某一个tcp连接中进行发送</code></pre><h1 id="http-1-0"><a href="#http-1-0" class="headerlink" title="http/1.0"></a>http/1.0</h1><pre><code>增加了很多命令，增加status code 和header，多字符集支持，多部分发送，权限，缓存等</code></pre><h1 id="http-1-1"><a href="#http-1-1" class="headerlink" title="http/1.1"></a>http/1.1</h1><pre><code>持久连接，增加host和其他一些命令（host可以在同一台服务器建立多个web服务）</code></pre><h1 id="http2-主要解决http中性能问题"><a href="#http2-主要解决http中性能问题" class="headerlink" title="http2(主要解决http中性能问题)"></a>http2(主要解决http中性能问题)</h1><pre><code>一、所有数据以二进制传输（帧）二、同一个连接里发送多个请求不在需要按照顺序来（提高传输效率）三、头信息压缩（减小带宽使用）以及推送（服务端可以主动发起数据传输）等提高效率的功能例如：web页面都有html，css，js文件，需要先请求到html文本然后在浏览器中运行解析完成以后，我们才能发送css，js请求，有了推送这个功能以后，可以在请求html的同时，主动把css，js文件推送给客户端，这样是一个并行发送的关系，而不是串行的，整体传输效率、性能会很高</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http-0-9&quot;&gt;&lt;a href=&quot;#http-0-9&quot; class=&quot;headerlink&quot; title=&quot;http/0.9&quot;&gt;&lt;/a&gt;http/0.9&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;只有一个命令GET,没有HEADER等描述数据的信息，服务器发送完数据，就关
      
    
    </summary>
    
      <category term="http协议" scheme="http://myzhangning.top/categories/http%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="http协议" scheme="http://myzhangning.top/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>http协议基础及历史</title>
    <link href="http://myzhangning.top/2018/08/27/http-protocol-and-history/"/>
    <id>http://myzhangning.top/2018/08/27/http-protocol-and-history/</id>
    <published>2018-08-27T15:41:02.000Z</published>
    <updated>2018-08-27T15:54:51.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五层协议"><a href="#五层协议" class="headerlink" title="五层协议"></a>五层协议</h1><img src="/2018/08/27/http-protocol-and-history/tcp-ip.png" title="五层协议示意图"><ol><li>物理层主要作用是定义物理设备如何传输数据（光缆）</li><li>数据链路层在通信的实体间建立数据链路连接</li><li>网络层为数据在结点之间传输创建逻辑链路</li><li>传输层向用户提供可靠的端到端（End-to-End）服务</li><li>传输层向高层屏蔽了下层数据通信的细节（例如：ajax post传输数据，这个数据大时一次性传输不完，如何进行传输，如何可靠的把信息传输给服务器，服务器返回的信息又如何可靠的被我们拿到，都是传输层实现的）</li><li>应用层为应用软件提供了很多服务，构建于tcp/ip协议之上屏蔽网络传输层相关细节</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;五层协议&quot;&gt;&lt;a href=&quot;#五层协议&quot; class=&quot;headerlink&quot; title=&quot;五层协议&quot;&gt;&lt;/a&gt;五层协议&lt;/h1&gt;&lt;img src=&quot;/2018/08/27/http-protocol-and-history/tcp-ip.png&quot; title
      
    
    </summary>
    
      <category term="http协议" scheme="http://myzhangning.top/categories/http%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="http协议" scheme="http://myzhangning.top/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>直播源的制作</title>
    <link href="http://myzhangning.top/2018/08/26/makeLive/"/>
    <id>http://myzhangning.top/2018/08/26/makeLive/</id>
    <published>2018-08-26T09:40:00.000Z</published>
    <updated>2018-08-26T12:14:33.631Z</updated>
    
    <content type="html"><![CDATA[<ol><li>安装nginx<br> brew tap denji/homebrew-nginx<br> brew install nginx-full –with-rtmp-module</li><li>安装ffmpeg<br> brew install ffmpeg</li><li><p>找到nginx 安装目录修改配置<br>配置Nginx,支持http协议拉流</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location /hls &#123;</span><br><span class="line">    #Serve HLS config</span><br><span class="line">    types &#123;</span><br><span class="line">        application/vnd.apple.mpegurl    m3u8;</span><br><span class="line">        video/mp2t ts;</span><br><span class="line">    &#125;</span><br><span class="line">    root /usr/local/var/www;</span><br><span class="line">    add_header Cache-Control    no-cache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 配置Nginx，支持rtmp协议推流</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    rtmp &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 1935;</span><br><span class="line">        application rtmplive &#123;</span><br><span class="line">            live on;</span><br><span class="line">            max_connections 1024;</span><br><span class="line">        &#125;</span><br><span class="line">        application hls&#123;</span><br><span class="line">            live on;</span><br><span class="line">            hls on;</span><br><span class="line">            hls_path /usr/local/var/www/hls;</span><br><span class="line">            hls_fragment 1s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>找测试源<br> cd test.mp4</p></li><li>启动nginx<br>nginx</li><li>推流至RTMP到服务器<br> ffmpeg -re -i test-2.mp4 -vcodec libx264 -acodec aac -f flv rtmp://localhost:1935/rtmplive/rtmp<br> 测试：<pre><code>下载vlc file=》open network 输入rtmp://localhost:1935/rtmplive/rtmp</code></pre></li><li>推流至HLS到服务器<br> ffmpeg -re -i test-2.mp4 -vcodec libx264 -acodec aac -f flv rtmp://localhost:1935/hls/strem<br> 测试： <pre><code>打开safari浏览器输入 localhost:1935/hls/strem.m3u8</code></pre></li><li>提示<br> 所有操作均在mac下</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;安装nginx&lt;br&gt; brew tap denji/homebrew-nginx&lt;br&gt; brew install nginx-full –with-rtmp-module&lt;/li&gt;
&lt;li&gt;安装ffmpeg&lt;br&gt; brew install ffmpeg&lt;/
      
    
    </summary>
    
      <category term="h5直播" scheme="http://myzhangning.top/categories/h5%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="h5直播" scheme="http://myzhangning.top/tags/h5%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>h5直播</title>
    <link href="http://myzhangning.top/2018/08/08/h5_1/"/>
    <id>http://myzhangning.top/2018/08/08/h5_1/</id>
    <published>2018-08-07T16:59:49.000Z</published>
    <updated>2018-08-07T16:54:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="直播原理"><a href="#直播原理" class="headerlink" title="直播原理"></a>直播原理</h1><img src="/2018/08/08/h5_1/yuanli.png" title="h5直播原理"><ol><li>收集完是流的形式（原始二进制数据流）</li><li>原始的流是不可以进行播放的，必须采用协议做编码</li><li>H.264 视频编码，AAC 为音频编码</li></ol><h1 id="视频格式"><a href="#视频格式" class="headerlink" title="视频格式"></a>视频格式</h1><img src="/2018/08/08/h5_1/视频格式.png" title="视频格式"><ol><li>mp4 兼容性好 IE,chrome,Firfox,safari 都支持</li><li>webm(yourtobe) chrome,Firfox 支持 IE,safari 不支持 webm是一种流式的视频格式</li><li>hls（.ts格式） Safari支持，苹果自己的协议</li><li>flv（.flv格式）早期flash视频格式 如：b站</li></ol><h1 id="直播协议"><a href="#直播协议" class="headerlink" title="直播协议"></a>直播协议</h1><ol><li>HLS 协议</li><li>RTMP 协议</li><li>HTTP-FLV协议</li></ol><h1 id="播放器分为"><a href="#播放器分为" class="headerlink" title="播放器分为"></a>播放器分为</h1><ol><li>点播：如优酷看视频</li><li>直播：b站,斗鱼（live）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;直播原理&quot;&gt;&lt;a href=&quot;#直播原理&quot; class=&quot;headerlink&quot; title=&quot;直播原理&quot;&gt;&lt;/a&gt;直播原理&lt;/h1&gt;&lt;img src=&quot;/2018/08/08/h5_1/yuanli.png&quot; title=&quot;h5直播原理&quot;&gt;
&lt;ol&gt;
&lt;li&gt;收
      
    
    </summary>
    
      <category term="h5直播" scheme="http://myzhangning.top/categories/h5%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="h5直播" scheme="http://myzhangning.top/tags/h5%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>hls</title>
    <link href="http://myzhangning.top/2018/08/08/hls/"/>
    <id>http://myzhangning.top/2018/08/08/hls/</id>
    <published>2018-08-07T16:39:49.000Z</published>
    <updated>2018-08-07T16:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hls-协议"><a href="#hls-协议" class="headerlink" title="hls 协议"></a>hls 协议</h1><img src="/2018/08/08/hls/HLS协议.png" title="video拿到m3u8文件解析过程"><ol><li>HLS协议是苹果提出的直播协议</li><li>M3U8的每一个片段就是直播流的一个分段<br>总结： HLS协议的直播来说它是先发送一个M3U8文件，M3U8文件会有很多索引告诉你有几个片段，这时就能播放</li></ol><h1 id="M3U8-文件的更新"><a href="#M3U8-文件的更新" class="headerlink" title="M3U8 文件的更新"></a>M3U8 文件的更新</h1><ol><li>video会在某个时间段内重新请求M3U8文件（浏览器自己的行为）, 这时服务器会返回新的M3U8文件</li><li>M3U8文件有很多索引对应TS文件</li><li>M3U8文件可以嵌套M3U8文件</li></ol><h1 id="M3U8-文件嵌套"><a href="#M3U8-文件嵌套" class="headerlink" title="M3U8 文件嵌套"></a>M3U8 文件嵌套</h1><img src="/2018/08/08/hls/M3U8文件嵌套.png" title="M3U8文件嵌套示意图"><h1 id="M3U8文件的细分"><a href="#M3U8文件的细分" class="headerlink" title="M3U8文件的细分"></a>M3U8文件的细分</h1><img src="/2018/08/08/hls/m3u8文件细分.png" title="m3u8文件细分"><h1 id="M3U8-文件内容"><a href="#M3U8-文件内容" class="headerlink" title="M3U8 文件内容"></a>M3U8 文件内容</h1><img src="/2018/08/08/hls/m3u8动态文件内容.png" title="m3u8动态文件内容"><ol><li>#EXTM3U  动态列表文件如下：</li><li>#EXT-X-VERSIOIV:6 版本 （默认为3）</li><li>#EXT-X-TARGETDURATION: 时长</li><li>#EXT-X-MEDIA-SEQUENCE: 26 序号</li><li>EXTINF: 9.901 下面时长为多少<br> <a href="http://media.example.om/wifi/segment26.ts" target="_blank" rel="noopener">http://media.example.om/wifi/segment26.ts</a></li></ol><h1 id="ts-文件和mp4，webm，flv之间的区别"><a href="#ts-文件和mp4，webm，flv之间的区别" class="headerlink" title="ts 文件和mp4，webm，flv之间的区别"></a>ts 文件和mp4，webm，flv之间的区别</h1><img src="/2018/08/08/hls/ts文件.png" title="ts文件"><ol><li>RMT 会告诉哪个TS包是视频，哪些是音频</li><li>TS 文件先找PAT的包，PAT告诉PMT在哪里 PMT去找对应TS</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hls-协议&quot;&gt;&lt;a href=&quot;#hls-协议&quot; class=&quot;headerlink&quot; title=&quot;hls 协议&quot;&gt;&lt;/a&gt;hls 协议&lt;/h1&gt;&lt;img src=&quot;/2018/08/08/hls/HLS协议.png&quot; title=&quot;video拿到m3u8文件
      
    
    </summary>
    
      <category term="h5直播" scheme="http://myzhangning.top/categories/h5%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="h5直播" scheme="http://myzhangning.top/tags/h5%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>HTTP_FLV</title>
    <link href="http://myzhangning.top/2018/08/08/HTTP-FLV/"/>
    <id>http://myzhangning.top/2018/08/08/HTTP-FLV/</id>
    <published>2018-08-07T16:29:49.000Z</published>
    <updated>2018-08-07T16:54:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-FLV协议"><a href="#HTTP-FLV协议" class="headerlink" title="HTTP-FLV协议"></a>HTTP-FLV协议</h1><img src="/2018/08/08/HTTP-FLV/HTTP-FLV协议.png" title="HTTP-FLV协议"><ol><li>低延时</li><li>传输为flv格式与RTMP都是长连接，中间传输的都是flv，区别：播放器到CDN之间建立的连接是HTTP请求,而RTMP为TCP<h1 id="HTTP-FLV协议的优势"><a href="#HTTP-FLV协议的优势" class="headerlink" title="HTTP-FLV协议的优势"></a>HTTP-FLV协议的优势</h1></li><li>可以在一定程度上避免防火墙的干扰（如：有的机房只允许80端口通过）</li><li>可以很好的兼容HTTP 302 跳转，做到灵活调度</li><li>可以使用HTTPS 做加密通道</li><li>很好的支持移动端（Android, ios）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP-FLV协议&quot;&gt;&lt;a href=&quot;#HTTP-FLV协议&quot; class=&quot;headerlink&quot; title=&quot;HTTP-FLV协议&quot;&gt;&lt;/a&gt;HTTP-FLV协议&lt;/h1&gt;&lt;img src=&quot;/2018/08/08/HTTP-FLV/HTTP-FLV协议
      
    
    </summary>
    
      <category term="h5直播" scheme="http://myzhangning.top/categories/h5%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="h5直播" scheme="http://myzhangning.top/tags/h5%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>RTMP</title>
    <link href="http://myzhangning.top/2018/08/08/RTMP/"/>
    <id>http://myzhangning.top/2018/08/08/RTMP/</id>
    <published>2018-08-07T16:19:49.000Z</published>
    <updated>2018-08-07T16:57:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RTMP协议概述"><a href="#RTMP协议概述" class="headerlink" title="RTMP协议概述"></a>RTMP协议概述</h1><img src="/2018/08/08/RTMP/RTMP协议概述.png" title="RTMP协议概述"><ol><li>RTMP 协议使用相对复杂（实时消息传输协议）基于HTTP,主要用于flash，如果采集端是web端来做它的协议叫做webRTC</li><li>客户端为RTMP协议效率高一些</li></ol><h1 id="RTMP协议"><a href="#RTMP协议" class="headerlink" title="RTMP协议"></a>RTMP协议</h1><img src="/2018/08/08/RTMP/RTMP协议.png" title="RTMP协议"><ol><li>RTMP 协议传输过程是flv视频格式的</li><li>RTMP –&gt; TCP HLS –&gt; HTTP</li><li>HLS 简单但实时性相对差，有延时（延时与M3U8文件的索引文件数量有关）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RTMP协议概述&quot;&gt;&lt;a href=&quot;#RTMP协议概述&quot; class=&quot;headerlink&quot; title=&quot;RTMP协议概述&quot;&gt;&lt;/a&gt;RTMP协议概述&lt;/h1&gt;&lt;img src=&quot;/2018/08/08/RTMP/RTMP协议概述.png&quot; title=&quot;R
      
    
    </summary>
    
      <category term="h5直播" scheme="http://myzhangning.top/categories/h5%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="h5直播" scheme="http://myzhangning.top/tags/h5%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>直播总结</title>
    <link href="http://myzhangning.top/2018/08/08/%E7%9B%B4%E6%92%AD%E6%80%BB%E7%BB%93/"/>
    <id>http://myzhangning.top/2018/08/08/直播总结/</id>
    <published>2018-08-07T16:09:49.000Z</published>
    <updated>2018-08-27T15:19:06.850Z</updated>
    
    <content type="html"><![CDATA[<ol><li>如果采集用客户端来做，通常使用RTMP协议（后端对TCP比较了解）</li><li>对于低延时的场景使用RTMP协议或者HTTP-FLV,对于延时要求不高的     可以使用HLS不需要考虑并发</li><li>video 标签中的地址为blob时，用的是虚拟地址（防止视频被下载）<br> 如：src=’blob:https://…..’</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;如果采集用客户端来做，通常使用RTMP协议（后端对TCP比较了解）&lt;/li&gt;
&lt;li&gt;对于低延时的场景使用RTMP协议或者HTTP-FLV,对于延时要求不高的     可以使用HLS不需要考虑并发&lt;/li&gt;
&lt;li&gt;video 标签中的地址为blob时，用的是虚
      
    
    </summary>
    
      <category term="h5直播" scheme="http://myzhangning.top/categories/h5%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="h5直播" scheme="http://myzhangning.top/tags/h5%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB配置</title>
    <link href="http://myzhangning.top/2018/03/05/mongoDB%E9%85%8D%E7%BD%AE/"/>
    <id>http://myzhangning.top/2018/03/05/mongoDB配置/</id>
    <published>2018-03-04T16:00:00.000Z</published>
    <updated>2018-03-05T03:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>配置MongoDB<br>a.在c:\MongoDB（可随意起）下面建一个data文件夹 c:\MongoDB\data<br>b.在c:\MongoDB（可随意起）下面建一个logs文件夹 c:\MongoDB\logs ，在里面建一个文件mongo.log<br>c.在c:\MongoDB（可随意起）下面建一个etc(随意起，放配置文件)文件夹 c:\MongoDB\etc ,在里面建一个文件mongo.conf<br>d.打开mongo.conf文件，修改如下：<br> <!-- #数据库路径 --><br>dbpath=c:\MongoDB\data\<br><!-- #日志输出文件路径 --><br>logpath=c:\MongoDB\logs\mongodb.log<br><!-- #错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件 --><br>logappend=true<br><!-- #启用日志文件，默认启用 --><br>journal=true<br><!-- #这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false --><br>quiet=false<br><!-- #端口号 默认为27017 --><br>port=27017<br><!-- #指定存储引擎（默认先不加此引擎，如果报错了，大家在加进去） --><br>storageEngine=mmapv1<br>完成以上操作后，我们就可以启动我们的mongo数据库了。</p><!-- # 在服务中写入 --><p>mongod –config c:\MongoDB\etc\mongo.conf –install –serviceName “MongoDB”</p><!-- 在环境变量path中配置MongoDB --><p>c:\Program Files\MongoDB\Server\3.4\bin</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;配置MongoDB&lt;br&gt;a.在c:\MongoDB（可随意起）下面建一个data文件夹 c:\MongoDB\data&lt;br&gt;b.在c:\MongoDB（可随意起）下面建一个logs文件夹 c:\MongoDB\logs ，在里面建一个文件mongo.log&lt;br&gt;c.在
      
    
    </summary>
    
      <category term="mongoDB" scheme="http://myzhangning.top/categories/mongoDB/"/>
    
    
  </entry>
  
  <entry>
    <title>python</title>
    <link href="http://myzhangning.top/2018/01/16/python3-data-type/"/>
    <id>http://myzhangning.top/2018/01/16/python3-data-type/</id>
    <published>2018-01-15T16:00:00.000Z</published>
    <updated>2018-01-17T08:28:56.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="python" scheme="http://myzhangning.top/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>nodemailer+(node-schedule)+phantom 实现定时发送邮件截图</title>
    <link href="http://myzhangning.top/2018/01/16/nodemailer/"/>
    <id>http://myzhangning.top/2018/01/16/nodemailer/</id>
    <published>2018-01-15T16:00:00.000Z</published>
    <updated>2018-01-17T07:02:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="nodemailer"><a href="#nodemailer" class="headerlink" title="nodemailer"></a>nodemailer</h1><pre><code>近来研究了下phantomjs,只是初涉，还谈不上深入研究，首先介绍下什么是phantomjs。</code></pre><p>官网上的介绍是：”PhantomJS is a headless WebKit scriptable with a JavaScript API. It has fast and native support for various web standards: DOM handling, CSS selector, JSON, Canvas, and SVG.”翻译过来就是：”PhantomJS 是一个基于 WebKit 的服务器端 JavaScript API。它全面支持web而不需浏览器支持，其快速，原生支持各种Web标准： DOM 处理, CSS 选择器, JSON, Canvas, 和 SVG。 ”   PhantomJS 可以用于页面自动化，网络监测，网页截屏，以及无界面测试等。<br>nodemailer：为了实现这个功能，你首先要有一个邮箱；由于需要使用SMTP方式发送，你还需要开启相关功能。<br>node-schedule：作为定时用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// 截图</span></span><br><span class="line"><span class="keyword">const</span> phantom = <span class="built_in">require</span>(<span class="string">'phantom'</span>);</span><br><span class="line"><span class="comment">// 邮件发送</span></span><br><span class="line"><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">'nodemailer'</span>);</span><br><span class="line"><span class="comment">// 定时</span></span><br><span class="line"><span class="keyword">const</span> schedule = <span class="built_in">require</span>(<span class="string">"node-schedule"</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sendMails</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        (<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">const</span> instance = <span class="keyword">await</span> phantom.create();</span><br><span class="line">            <span class="keyword">const</span> page = <span class="keyword">await</span> instance.createPage();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">await</span> page.property(<span class="string">'viewportSize'</span>, &#123;&#125;);</span><br><span class="line">            <span class="comment">// console.log(url)</span></span><br><span class="line">            <span class="comment">// console.log("url打开了");</span></span><br><span class="line">            <span class="keyword">const</span> status = <span class="keyword">await</span> page.open(url);</span><br><span class="line"></span><br><span class="line">            page.property(<span class="string">'clipRect'</span>, &#123;</span><br><span class="line">                top: <span class="number">50</span>,</span><br><span class="line">                left: <span class="number">160</span>,</span><br><span class="line">                width: <span class="number">1400</span>,</span><br><span class="line">                height: <span class="number">4000</span></span><br><span class="line">            &#125;);</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="comment">// console.log("开始截图了");</span></span><br><span class="line">                page.render(<span class="string">'./public/emaiimg/stackoverflow.png'</span>);</span><br><span class="line"></span><br><span class="line">            &#125;, <span class="number">55000</span>);</span><br><span class="line">            <span class="comment">// console.log("截图完成了");</span></span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                instance.exit();</span><br><span class="line">                <span class="keyword">const</span> config_email = &#123;</span><br><span class="line">                    host: <span class="string">'smtp.exmail.qq.com'</span>,</span><br><span class="line">                    post: <span class="number">465</span>, <span class="comment">// SMTP 端口</span></span><br><span class="line">                    <span class="comment">//secureConnection: true, // 使用 SSL</span></span><br><span class="line">                    auth: &#123;</span><br><span class="line">                        user: <span class="string">'zhangning@zumainfo.com'</span>,</span><br><span class="line">                        <span class="comment">//这里密码不是qq密码，是你设置的smtp密码</span></span><br><span class="line">                        pass: <span class="string">'Zhangning0408'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">var</span> transporter = nodemailer.createTransport(config_email);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> data = &#123;</span><br><span class="line">                    <span class="keyword">from</span>: <span class="string">'zhangning@zumainfo.com'</span>, <span class="comment">// 发件地址</span></span><br><span class="line">                    <span class="comment">//to: dat[0].receivers, // 收件列表</span></span><br><span class="line">                    to: <span class="string">'980090631@qq.com'</span>, <span class="comment">// 收件列表</span></span><br><span class="line">                    subject: dat[<span class="number">0</span>].title, <span class="comment">// 标题</span></span><br><span class="line">                    <span class="comment">//text: 'Hello world feng' // 标题 //text和html两者只支持一种</span></span><br><span class="line">                    <span class="comment">// html: "测试", // html 内容</span></span><br><span class="line">                    attachments: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            filename: <span class="string">'stackoverflow.png'</span>,</span><br><span class="line">                            path: <span class="string">'./public/emaiimg/stackoverflow.png'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;;</span><br><span class="line">                transporter.sendMail(data, <span class="function"><span class="keyword">function</span> (<span class="params">err, info</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">console</span>.log(err);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'Message sent: '</span> + info.response);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">60000</span>);</span><br><span class="line">        &#125;)();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rule = <span class="keyword">new</span> schedule.RecurrenceRule();</span><br><span class="line">rule.dayOfWeek = [<span class="number">0</span>, <span class="keyword">new</span> schedule.Range(<span class="number">1</span>, <span class="number">6</span>)];</span><br><span class="line">rule.hour = <span class="string">'16'</span>;</span><br><span class="line">rule.minute = <span class="string">'6'</span>;</span><br><span class="line"><span class="keyword">var</span> j = schedule.scheduleJob(rule, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    sendMails();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;nodemailer&quot;&gt;&lt;a href=&quot;#nodemailer&quot; class=&quot;headerlink&quot; title=&quot;nodemailer&quot;&gt;&lt;/a&gt;nodemailer&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;近来研究了下phantomjs,只是初涉，还谈不上深入研究，
      
    
    </summary>
    
      <category term="nodejs" scheme="http://myzhangning.top/categories/nodejs/"/>
    
    
  </entry>
  
  <entry>
    <title>mongoDB在node中的使用</title>
    <link href="http://myzhangning.top/2018/01/04/mongoDB/"/>
    <id>http://myzhangning.top/2018/01/04/mongoDB/</id>
    <published>2018-01-03T16:00:00.000Z</published>
    <updated>2018-01-17T07:07:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="mongoose"><a href="#mongoose" class="headerlink" title="mongoose"></a>mongoose</h1><pre><code>NodeJS有专门的模块连接MongoDB操作数据库，但是从数据验证，定义Schema数据模式，以及model处理增删改查等方面，Mongoose都有过之无不及，极大的提升开发效率Mongoose是MongoDB的一个对象模型工具，是基于node-mongodb-native开发的MongoDB nodejs驱动，可以在异步的环境下执行。同时它也是针对MongoDB操作的一个对象模型库，封装了MongoDB对文档的的一些增删改查等常用方法，让NodeJS操作Mongodb数据库变得更加灵活简单。Schema ： 一种以文件形式存储的数据库模型骨架，不具备数据库的操作能力Model ： 由Schema发布生成的模型，具有抽象属性和行为的数据库操作对</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="comment">// 链接MongoDB</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost:27017/react'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否链接成功</span></span><br><span class="line">mongoose.connection.on(<span class="string">'connected'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'mongoDB connect success !'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 类似mysql的表 mongo有文档，字段的概念 新建模型</span></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">'user'</span>, <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    user: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">require</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    age: &#123; <span class="attr">type</span>: <span class="built_in">Number</span>, <span class="attr">require</span>: <span class="literal">true</span> &#125;</span><br><span class="line">&#125;));</span><br><span class="line">User.create(&#123;</span><br><span class="line">    user: <span class="string">'xiao'</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line"><span class="comment">//findOne 查找一条</span></span><br><span class="line">User.find(&#123;<span class="string">'user'</span>:<span class="string">'xiaoming'</span>&#125;,(error,data)=&gt;&#123;&#125;);</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">User.remove(&#123;<span class="attr">age</span>:<span class="number">18</span>&#125;,(error,data)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 更新</span></span><br><span class="line">User.update(&#123;<span class="string">'user'</span>:<span class="string">'xiaoming'</span>&#125;,&#123;<span class="string">'$set'</span>:&#123;<span class="attr">age</span>:<span class="number">26</span>&#125;&#125;,(error,data)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;mongoose&quot;&gt;&lt;a href=&quot;#mongoose&quot; class=&quot;headerlink&quot; title=&quot;mongoose&quot;&gt;&lt;/a&gt;mongoose&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;NodeJS有专门的模块连接MongoDB操作数据库，但是从数据验证，定义S
      
    
    </summary>
    
      <category term="mongoDB" scheme="http://myzhangning.top/categories/mongoDB/"/>
    
    
  </entry>
  
  <entry>
    <title>nodejs excel导出</title>
    <link href="http://myzhangning.top/2018/01/03/nodejsExcel%E5%AF%BC%E5%87%BA/"/>
    <id>http://myzhangning.top/2018/01/03/nodejsExcel导出/</id>
    <published>2018-01-02T16:00:00.000Z</published>
    <updated>2018-03-02T02:02:48.000Z</updated>
    
    <content type="html"><![CDATA[<p> 之前一直在用前端导出，但是当数据量过大，在一万条左右时就力不从心了</p><ol><li>ejsexcel 可以合并单元格，动态输出等，就是需要有模板文件 详情 <a href="https://www.npmjs.com/package/ejsexcel" target="_blank" rel="noopener">https://www.npmjs.com/package/ejsexcel</a></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  ejsExcel.renderExcel(exlBuf_search, attr_box).then(<span class="function"><span class="keyword">function</span> (<span class="params">exlBuf2</span>) </span>&#123;</span><br><span class="line">               fs.writeFileSync(path.join(__dirname, <span class="string">'../templetExcel/searchspcode.xlsx'</span>), exlBuf2);</span><br><span class="line">               <span class="keyword">var</span> newsExcel = fs.readFileSync(path.join(__dirname, <span class="string">'../templetExcel/searchspcode.xlsx'</span>));</span><br><span class="line">               res.setHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/vnd.openxmlformats; charset=utf-8'</span>);</span><br><span class="line">               res.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;filename=spcode.xlsx"</span>);</span><br><span class="line">               res.end(newsExcel);</span><br><span class="line">           &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.error(<span class="string">'error'</span>, err);</span><br><span class="line">           &#125;);</span><br><span class="line"><span class="comment">// 其中 exlBuf_search为模板文件，attr_box为数据源（必须为二维数组）</span></span><br></pre></td></tr></table></figure><ol start="2"><li>excel-export 不支持合并单元格,需要xml文件</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 之前一直在用前端导出，但是当数据量过大，在一万条左右时就力不从心了&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ejsexcel 可以合并单元格，动态输出等，就是需要有模板文件 详情 &lt;a href=&quot;https://www.npmjs.com/package/ejsexcel&quot; targ
      
    
    </summary>
    
      <category term="nodejs" scheme="http://myzhangning.top/categories/nodejs/"/>
    
    
  </entry>
  
  <entry>
    <title>Ant Design的配置</title>
    <link href="http://myzhangning.top/2018/01/03/design/"/>
    <id>http://myzhangning.top/2018/01/03/design/</id>
    <published>2018-01-02T16:00:00.000Z</published>
    <updated>2018-03-02T02:31:30.000Z</updated>
    
    <content type="html"><![CDATA[<ol><li>npm install babel-plugin-import 安装babel插件，在package.json中配置babel</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">   "babel": &#123;</span><br><span class="line">  "plugins": [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"import"</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"libraryName"</span>: <span class="string">"antd-mobile"</span>,</span><br><span class="line">        <span class="attr">"style"</span>: <span class="string">"css"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">      <span class="string">"transform-decorators-legacy"</span></span><br><span class="line">    ]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 然后只需从 antd 引入模块即可<br>    import { DatePicker } from ‘antd’;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;npm install babel-plugin-import 安装babel插件，在package.json中配置babel&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="nodejs" scheme="http://myzhangning.top/categories/nodejs/"/>
    
    
  </entry>
  
  <entry>
    <title>nodejs项目部署之vue</title>
    <link href="http://myzhangning.top/2018/01/03/vue%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
    <id>http://myzhangning.top/2018/01/03/vue项目部署/</id>
    <published>2018-01-02T16:00:00.000Z</published>
    <updated>2018-03-01T07:47:22.000Z</updated>
    
    <content type="html"><![CDATA[<p> 项目打包后dist目录就是要部署到线上的项目，然后新建app.js,然后ftp上传，用pm2 start app.js 启动<br>首先你要有一个已经能在本地跑的基于vuejs的项目,我就以之前写的仿饿了么的项目为例来部署，如果你还没有已经写好的项目，可以用我的这个项目来学习 <a href="https://github.com/Dave-SEO/ele" target="_blank" rel="noopener">https://github.com/Dave-SEO/ele</a><br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 模拟数据，api服务</span></span><br><span class="line"><span class="keyword">var</span> appData = <span class="built_in">require</span>(<span class="string">'./data.json'</span>);</span><br><span class="line"><span class="keyword">var</span> seller = appData.seller;</span><br><span class="line"><span class="keyword">var</span> goods = appData.goods;</span><br><span class="line"><span class="keyword">var</span> ratings = appData.ratings;</span><br><span class="line"><span class="comment">// api接口</span></span><br><span class="line"><span class="keyword">var</span> apiRoutes = express.Router();</span><br><span class="line">apiRoutes.get(<span class="string">'/seller'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">        erron: <span class="number">0</span>,</span><br><span class="line">        data: seller</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">apiRoutes.get(<span class="string">'/goods'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">        erron: <span class="number">0</span>,</span><br><span class="line">        data: goods</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">apiRoutes.get(<span class="string">'/ratings'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.json(&#123;</span><br><span class="line">        erron: <span class="number">0</span>,</span><br><span class="line">        data: ratings</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">app.use(<span class="string">'/api'</span>, apiRoutes);</span><br><span class="line">app.use(express.static(path.resolve(__dirname, <span class="string">'./dist'</span>)))</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">'*'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> html = fs.readFileSync(path.resolve(__dirname, <span class="string">'./dist/index.html'</span>), <span class="string">'utf-8'</span>)</span><br><span class="line">    res.send(html)</span><br><span class="line">&#125;)</span><br><span class="line">app.listen(<span class="number">8082</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 项目打包后dist目录就是要部署到线上的项目，然后新建app.js,然后ftp上传，用pm2 start app.js 启动&lt;br&gt;首先你要有一个已经能在本地跑的基于vuejs的项目,我就以之前写的仿饿了么的项目为例来部署，如果你还没有已经写好的项目，可以用我的这个项目来
      
    
    </summary>
    
      <category term="nodejs" scheme="http://myzhangning.top/categories/nodejs/"/>
    
    
  </entry>
  
  <entry>
    <title>redux-devTools的使用</title>
    <link href="http://myzhangning.top/2017/12/29/redux-devTools/"/>
    <id>http://myzhangning.top/2017/12/29/redux-devTools/</id>
    <published>2017-12-28T16:00:00.000Z</published>
    <updated>2018-01-02T07:30:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redux-devTools的使用"><a href="#redux-devTools的使用" class="headerlink" title="redux-devTools的使用"></a>redux-devTools的使用</h1><ol><li>谷歌搜索 redux</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = createStore(counter,compose(applyMiddleware(thunk),<span class="built_in">window</span>.devToolsExtension?<span class="built_in">window</span>.devToolsExtension():<span class="function"><span class="params">()</span>=&gt;</span>&#123;&#125;</span><br><span class="line">));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;redux-devTools的使用&quot;&gt;&lt;a href=&quot;#redux-devTools的使用&quot; class=&quot;headerlink&quot; title=&quot;redux-devTools的使用&quot;&gt;&lt;/a&gt;redux-devTools的使用&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;谷歌搜索
      
    
    </summary>
    
      <category term="redux" scheme="http://myzhangning.top/categories/redux/"/>
    
    
  </entry>
  
  <entry>
    <title>react-redux的使用</title>
    <link href="http://myzhangning.top/2017/12/28/react-redux/"/>
    <id>http://myzhangning.top/2017/12/28/react-redux/</id>
    <published>2017-12-27T16:00:00.000Z</published>
    <updated>2018-01-02T09:31:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Provider&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line">ReactDOM.render((&lt;Provider store=&#123;store&#125;&gt;&lt;App /&gt;&lt;/Provider&gt;),<span class="built_in">document</span>.getElementById(<span class="string">'root'</span>));</span><br></pre></td></tr></table></figure><h2 id="其它页面使用"><a href="#其它页面使用" class="headerlink" title="其它页面使用"></a>其它页面使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;connect&#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="comment">// es7 提案装饰器，需babel配置</span></span><br><span class="line">@connect(</span><br><span class="line">  <span class="comment">// 你要state什么属性放到props里</span></span><br><span class="line">  state=&gt;(&#123;<span class="attr">num</span>:state&#125;),</span><br><span class="line">  <span class="comment">//你要什么方法放到props里，自动dispath</span></span><br><span class="line">  &#123;addNum,subtr,addNumAsync&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰器插件安装 修饰器（Decorator）是一个函数，用来修改类的行为</span></span><br><span class="line">cnpm install babel-plugin-transform-decorators-legacy --save-dev</span><br><span class="line"><span class="comment">// package.json中配置</span></span><br><span class="line"> <span class="string">"plugins"</span>: [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">"transform-decorators-legacy"</span></span><br><span class="line">      ]</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;index-js&quot;&gt;&lt;a href=&quot;#index-js&quot; class=&quot;headerlink&quot; title=&quot;index.js&quot;&gt;&lt;/a&gt;index.js&lt;/h1&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;
      
    
    </summary>
    
      <category term="redux" scheme="http://myzhangning.top/categories/redux/"/>
    
    
  </entry>
  
  <entry>
    <title>redux</title>
    <link href="http://myzhangning.top/2017/12/28/redux/"/>
    <id>http://myzhangning.top/2017/12/28/redux/</id>
    <published>2017-12-27T16:00:00.000Z</published>
    <updated>2018-01-17T07:09:52.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redux是专注于状态管理的库，和react解耦-单一状态"><a href="#redux是专注于状态管理的库，和react解耦-单一状态" class="headerlink" title="redux是专注于状态管理的库，和react解耦,单一状态"></a>redux是专注于状态管理的库，和react解耦,单一状态</h1><p>Redux 是 JavaScript 状态容器，提供可预测化的状态管理。<br>可以让你构建一致化的应用，运行于不同的环境（客户端、服务器、原生应用），并且易于测试。不仅于此，它还提供 超爽的开发体验，比如有一个时间旅行调试器可以编辑后实时预览。<br>Redux 除了和 React 一起用外，还支持其它界面库。<br>它体小精悍（只有2kB）且没有任何依赖。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单向数据流,核心概念:store，state，action，reducer</span></span><br><span class="line"><span class="comment">//  新建store,通过reducer 简历,根据老的state和action 生成新的state</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state=<span class="number">0</span>,action</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'add'</span>:</span><br><span class="line">            <span class="keyword">return</span> state + <span class="number">1</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'minus'</span>:</span><br><span class="line">            <span class="keyword">return</span> state - <span class="number">1</span></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  新建store</span></span><br><span class="line"><span class="keyword">const</span> store = creatStore(counter);</span><br><span class="line"><span class="comment">//  获取状态</span></span><br><span class="line"><span class="keyword">const</span> init = store.getState();</span><br><span class="line"><span class="comment">// 3.监听变化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">listener</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> current = store.getState();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`现在有<span class="subst">$&#123;current&#125;</span>把`</span>);</span><br><span class="line">&#125;</span><br><span class="line">store.subscribe(listener);</span><br><span class="line"><span class="comment">//  派发事件 传递action</span></span><br><span class="line">store.dispatch(&#123;<span class="attr">type</span>:<span class="string">'add'</span>&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;redux是专注于状态管理的库，和react解耦-单一状态&quot;&gt;&lt;a href=&quot;#redux是专注于状态管理的库，和react解耦-单一状态&quot; class=&quot;headerlink&quot; title=&quot;redux是专注于状态管理的库，和react解耦,单一状态&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="redux" scheme="http://myzhangning.top/categories/redux/"/>
    
    
  </entry>
  
</feed>

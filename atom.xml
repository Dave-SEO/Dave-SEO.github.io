<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>永无止境</title>
  
  <subtitle>奋斗不息</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://myzhangning.top/"/>
  <updated>2019-03-28T16:07:33.664Z</updated>
  <id>http://myzhangning.top/</id>
  
  <author>
    <name>Dave-SEO</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>dart</title>
    <link href="http://myzhangning.top/2019/03/26/dart/"/>
    <id>http://myzhangning.top/2019/03/26/dart/</id>
    <published>2019-03-26T15:00:00.000Z</published>
    <updated>2019-03-28T16:07:33.664Z</updated>
    
    <content type="html"><![CDATA[<h6 id="dart-概述"><a href="#dart-概述" class="headerlink" title="dart 概述"></a>dart 概述</h6><ol><li>dart 是Google发布的一门开源编程语言</li><li>dart 初期目标是成为下一代的web开发语言</li><li>dart 目前已可用于全平台开发</li><li>dart 是一门面向对象的编程语言<h6 id="dart-应用场景"><a href="#dart-应用场景" class="headerlink" title="dart 应用场景"></a>dart 应用场景</h6></li><li>web开发</li><li>跨平台移动应用开发</li><li>脚本或服务端开发<h6 id="helloWorld"><a href="#helloWorld" class="headerlink" title="helloWorld"></a>helloWorld</h6><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main 程序入口</span></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line"><span class="comment">// 控制台打印</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'HelloWorld'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h6><ol><li>使用var 声明变量，可赋予不同类型的值</li><li>未初始化时，默认值为null</li><li>使用final声明一个只能赋值一次的变量</li><li>使用const 来声明常量</li><li>使用const 声明的必须是编译期常量（在编译阶段就能确定的值）<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">// main 程序入口</span></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="comment">// 控制台打印</span></span><br><span class="line">  <span class="keyword">var</span> a; </span><br><span class="line">  <span class="built_in">print</span>(a); <span class="comment">//null</span></span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">print</span>(a); <span class="comment">//1</span></span><br><span class="line">  a = <span class="string">'Hello World'</span>;</span><br><span class="line">  <span class="built_in">print</span>(a); <span class="comment">// Hello World</span></span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line">  <span class="built_in">print</span>(c); <span class="comment">// 3</span></span><br><span class="line">  <span class="keyword">final</span> d = <span class="number">1</span>;</span><br><span class="line">  d = <span class="number">1</span>; <span class="comment">// d', a final variable, can only be set once.</span></span><br><span class="line">  <span class="keyword">const</span> m = <span class="number">1</span>;</span><br><span class="line">  m = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h6 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h6><ol><li><p>内置类型</p><ul><li>数值型-Number</li></ul><ul><li>Int 整型</li><li>double 浮点型</li></ul><ul><li>数值型操作</li></ul><ul><li>运算符：+, -, *, /, ~/(取整), %</li><li>常用属性: isNaN, isEven（偶数）, isOdd（奇数）等</li><li>常用方法：abs(),round(),floor(),ceil(),toInt(),toDouble()<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    <span class="comment">//可以是具体的类型，也可直接用num</span></span><br><span class="line">    <span class="built_in">num</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">double</span> c = <span class="number">3.5</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">0.0</span>/<span class="number">0.0</span>); <span class="comment">// NaN</span></span><br><span class="line">    <span class="built_in">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">print</span>(p.isOdd); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">print</span>(p.isEven); <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>字符串- String</li></ul><ul><li>字符串创建<ol><li>使用单引号，双引号创建字符串</li><li>使用三个引号或双引号创建多行字符串</li><li>使用r创建原始raw字符串 (不转译，原样输出)</li></ol></li><li>字符串操作<ol><li>运算符: +, *,==,[]</li><li>插值表达式: ${expression}</li><li>常用属性： length,isEmpty,isNotEmpty</li><li>常用方法：contains(),subString(),startWith(),endWith(),indexOf(),lastIndexOf(),,toLowerCase(),toUpperCase(),trim(),trimLeft(),trimRight(),split(),replaceXXX()<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="built_in">String</span> a = <span class="string">'1'</span>;</span><br><span class="line">    <span class="built_in">String</span> b =<span class="string">"2"</span>;</span><br><span class="line">    <span class="built_in">String</span> c = <span class="string">"""dart</span></span><br><span class="line"><span class="string">                is final"""</span>;</span><br><span class="line">    <span class="built_in">String</span> f = <span class="string">'d  \n dart'</span>;</span><br><span class="line">    <span class="built_in">String</span> d = <span class="string">r'd  \n dart'</span>; <span class="comment">// 原样输出</span></span><br><span class="line">    <span class="built_in">print</span>(c);</span><br><span class="line">    <span class="built_in">print</span>(f);</span><br><span class="line">    <span class="built_in">print</span>(d); <span class="comment">// d  \n dart</span></span><br><span class="line">    <span class="comment">// 字符串操作</span></span><br><span class="line">    <span class="built_in">String</span> str = <span class="string">'hello world'</span>;</span><br><span class="line">    <span class="built_in">String</span> str1 = <span class="string">'hello'</span>;</span><br><span class="line">    <span class="built_in">print</span>(str + <span class="string">'new'</span>); <span class="comment">//hello worldnew</span></span><br><span class="line">    <span class="built_in">print</span>(str*<span class="number">5</span>); <span class="comment">// hello worldhello worldhello worldhello worldhello world</span></span><br><span class="line">    <span class="built_in">print</span>(str == str1); <span class="comment">// fasle</span></span><br><span class="line">    <span class="built_in">print</span>(str[<span class="number">0</span>]); <span class="comment">// h</span></span><br><span class="line">    <span class="built_in">int</span> t = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">int</span> m = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a+b=<span class="subst">$&#123;t+m&#125;</span>"</span>); <span class="comment">//a+b = 11</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"a=$t"</span>); <span class="comment">// a = 5</span></span><br><span class="line">    <span class="built_in">print</span>(str.contains(<span class="string">'hello'</span>)); <span class="comment">// true  contains包涵</span></span><br><span class="line">    <span class="built_in">print</span>(str.substring(<span class="number">0</span>,<span class="number">2</span>)); <span class="comment">//  he</span></span><br><span class="line">    <span class="built_in">print</span>(str.startsWith(<span class="string">'a'</span>)); <span class="comment">// false 是否以a开头</span></span><br><span class="line">    <span class="built_in">print</span>(str.endsWith(<span class="string">'ld'</span>)); <span class="comment">// true 是否以ld结尾</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ul><li>布尔型- Boolean</li></ul><ul><li>使用bool表示布尔类型</li><li>布尔类型只有true,false<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bool</span> last = <span class="keyword">false</span>;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'hellow'</span>.isEmpty);</span><br></pre></td></tr></table></figure></li></ul><ul><li>列表(数组)-List</li></ul><ul><li>List的创建<ol><li>var list = [1,2,3];</li><li>创建不可变的List： var list = const [1,2,3];</li><li>构造创建： var list = new List();</li></ol><ul><li>常用操作</li></ul><ol><li>属性：[],length,isEmpty</li><li>方法：add(),insert(),remove(),clear(),indexOf(),laseIndexOf(),sort(),sublist(),shuffle(),asMap(),forEach()<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'hello'</span>, <span class="string">'worldh'</span>];</span><br><span class="line"><span class="built_in">print</span>(arr.length);</span><br><span class="line">arr.insert(<span class="number">1</span>, <span class="string">'-'</span>);</span><br><span class="line"><span class="built_in">print</span>(arr);</span><br><span class="line">arr.remove(<span class="string">'hello'</span>); <span class="comment">// 移除元素</span></span><br><span class="line"><span class="built_in">print</span>(arr); </span><br><span class="line">arr.clear();</span><br><span class="line"><span class="built_in">print</span>(arr);</span><br><span class="line"><span class="built_in">print</span>(arr.indexOf(<span class="string">'list'</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">print</span>(arr.lastIndexOf(<span class="string">'list'</span>)); <span class="comment">// -1</span></span><br><span class="line">arr.sort();</span><br><span class="line"><span class="built_in">print</span>(arr);</span><br><span class="line"><span class="built_in">print</span>(arr.sublist(<span class="number">2</span>)); <span class="comment">// ['worldh']</span></span><br><span class="line">arr.forEach(<span class="built_in">print</span>); <span class="comment">// -  hello  worldh</span></span><br></pre></td></tr></table></figure></li></ol></li></ul><ul><li>键值对-Map</li></ul><ul><li>Map的创建<ol><li>var a = {‘first’: ‘dart’,’second’};</li><li>创建不可变的map： var a = const {‘first’: ‘dart’,’second’};</li><li>构造创建： var map = new Map();</li></ol></li><li>常用操作<ol><li>属性：[],length,isNotEmpty,isEmpty,keys,values</li><li>方法：containsKey(),containsValue(),remove(),forEach()<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="keyword">var</span> map = &#123;<span class="string">'one'</span>: <span class="string">'1'</span>,<span class="string">'s'</span>:<span class="number">1</span>,<span class="string">'s3'</span>:<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="built_in">print</span>(map);</span><br><span class="line">    <span class="keyword">var</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    <span class="built_in">print</span>(map1);</span><br><span class="line">    <span class="built_in">print</span>(map1.isNotEmpty);</span><br><span class="line">    <span class="built_in">print</span>(map[<span class="string">'one'</span>]);</span><br><span class="line">    <span class="built_in">print</span>(map.length);</span><br><span class="line">    <span class="built_in">print</span>(map.keys);  <span class="comment">//(one,s)</span></span><br><span class="line">    <span class="built_in">print</span>(map.values); <span class="comment">// (1,1)</span></span><br><span class="line">    <span class="built_in">print</span>(map.isNotEmpty);</span><br><span class="line">    <span class="built_in">print</span>(map.containsKey(<span class="string">'one'</span>)); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">print</span>(map.containsValue(<span class="string">'2'</span>)); <span class="comment">// false</span></span><br><span class="line">    map.remove(<span class="string">'one'</span>); <span class="comment">// 传入key</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'map--$map'</span>);</span><br><span class="line">    map.forEach(f);</span><br><span class="line">    <span class="keyword">var</span> list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">3</span>];</span><br><span class="line">    <span class="comment">// print(list.isEmpty);</span></span><br><span class="line">    <span class="built_in">print</span>(list.asMap()); <span class="comment">//&#123;0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 3&#125;</span></span><br><span class="line">    <span class="comment">// 动态类型 dynamic</span></span><br><span class="line">    <span class="keyword">dynamic</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">print</span>(a);</span><br><span class="line">    <span class="keyword">var</span> list1 = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="keyword">dynamic</span>&gt;();</span><br><span class="line">    list1.add(<span class="string">'3'</span>);</span><br><span class="line">    list1.add(<span class="keyword">true</span>);</span><br><span class="line">    <span class="built_in">print</span>(list1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> f(key,value)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'mapkey-$key,mapvalue-$value'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><ul><li>Runes,Symbols</li></ul><h6 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h6></li></ol><ul><li><p>算数运算符</p><ul><li>加减乘除：+,-,*,/,~/,%</li><li>递增递减：++var, var–,–var,var–<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">    <span class="built_in">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">double</span> b = <span class="number">2.5</span>;</span><br><span class="line">    <span class="built_in">print</span>(a + b);</span><br><span class="line">    <span class="built_in">print</span>(a - b);</span><br><span class="line">    <span class="built_in">print</span>(a * b);</span><br><span class="line">    <span class="built_in">print</span>(a / b);</span><br><span class="line">    <span class="built_in">print</span>(a ~/ b); <span class="comment">// 取整 </span></span><br><span class="line">    <span class="built_in">print</span>(a % b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>关系运算符</p><ul><li>运算符：==,!=,&gt;,&lt;,&gt;=,&lt;=</li><li>判断内容是否相同使用 ==<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(a &gt; b); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">print</span>(a &lt; b); <span class="comment">//false</span></span><br><span class="line"><span class="built_in">print</span>(a == b); <span class="comment">//fasle</span></span><br><span class="line"><span class="built_in">print</span>(a &gt;= b); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">print</span>(a &lt;= b); <span class="comment">// fasle</span></span><br><span class="line"><span class="built_in">print</span>(a != b);<span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>逻辑运算符</p><ul><li>运算符：!,&amp;&amp;,||</li></ul></li><li><p>赋值运算符</p><ul><li>基础运算符：=,??= (如果声明的变量有值则为变量的值，没有则为??= 的值)</li><li>复合运算符：+=,-=,*=,/=,%=,~/=<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> tr = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">int</span> tr1 = <span class="number">20</span>;</span><br><span class="line">tr1 ??= <span class="number">5</span>; <span class="comment">// 如果声明的变量有值则为变量的值，没有则为??= 的值</span></span><br><span class="line"><span class="built_in">print</span>(tr1);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>条件表达式</p><ul><li>三目运算符：condition?expr1:expr2</li><li>?? 运算符：expr1??expr2 (如果expr1值为空使用expr2的值,如果expr1的值不为空,使用expr1的值)<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  aa;</span><br><span class="line"><span class="keyword">var</span>  bb = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span>  cc = aa ?? bb;</span><br><span class="line"><span class="built_in">print</span>(cc); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h6 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h6><ol><li>条件语句<ul><li>if语句</li><li>if…else if 语句</li><li>if…else</li></ul></li><li>循环语句<ul><li>for循环</li><li>for…in</li><li>while循环</li><li>do…while循环</li><li>终止循环：break</li><li>跳出当前循环：continue</li></ul></li><li>switch…case语句<ul><li>比较类型：num,String,编译期常量,对象,枚举</li><li>非空case必须有一个break</li><li>default 处理默认情况</li><li>continue 跳转标签（很多语言没有的特性）<h6 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h6></li></ul></li><li>方法定义<br>返回类型 方法名（参数1，参数2…）{<pre><code>方法体。。。return 返回值</code></pre>}</li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span> args)&#123;</span><br><span class="line">    <span class="built_in">print</span>(args);</span><br><span class="line">    getPersion(<span class="string">'zhangsan'</span>, <span class="number">18</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">String</span> getPersion(string name, <span class="built_in">int</span> age)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"name=$name,age=$age"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>方法特性<ul><li>方法也是对象，并且有具体类型function</li><li>返回值类型，参数类型都可以省略</li><li>箭头函数：=&gt; expr 是{return expr;}缩写。只适用于一个表达式</li><li>方法都有返回值。如果没有指定，默认return null</li></ul></li><li><p>可选参数</p><ul><li>可选命名参数：{param1,param2}</li><li>可选位置参数：{param1,param2}</li><li>如果存在具体参数，可选参数声明，必须在参数后面<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    printPersion(<span class="string">'张三'</span>); <span class="comment">// name=张三,age=null,gender=null</span></span><br><span class="line">    printPersion(<span class="string">'lisi'</span>,age:<span class="number">20</span>); <span class="comment">// name=lisi,age=20,gender=null</span></span><br><span class="line">    printPersion(<span class="string">'name'</span>,age:<span class="number">20</span>,gender:<span class="string">"Male"</span>); <span class="comment">// name=name,age=20,gender=Male</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 基于命名</span></span><br><span class="line">printPersion(<span class="built_in">String</span> name,&#123;<span class="built_in">int</span> age,<span class="built_in">String</span> gender&#125;)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name=$name,age=$age,gender=$gender"</span>);</span><br><span class="line">    printPersion2(<span class="string">'name'</span>,<span class="number">18</span>,<span class="string">'zhang'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 基于位置</span></span><br><span class="line">printPersion2(<span class="built_in">String</span> name,[<span class="built_in">int</span> age,<span class="built_in">String</span> gender])&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name=$name,age=$age,gender=$gender"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>默认参数值</p><ul><li>使用=在可选参数指定默认值</li><li>默认值只能是编译时常量<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    printPersion(<span class="string">'张三'</span>); <span class="comment">// name=张三,age=null,gender=null</span></span><br><span class="line">    printPersion(<span class="string">'lisi'</span>,age:<span class="number">20</span>); <span class="comment">// name=lisi,age=20,gender=null</span></span><br><span class="line">    printPersion(<span class="string">'name'</span>,age:<span class="number">20</span>,gender:<span class="string">"Male"</span>); <span class="comment">// name=name,age=20,gender=Male</span></span><br><span class="line">&#125;</span><br><span class="line">printPersion(<span class="built_in">String</span> name,&#123;<span class="built_in">int</span> age=<span class="number">20</span>,<span class="built_in">String</span> gender=“张三”&#125;)&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"name=$name,age=$age,gender=$gender"</span>);</span><br><span class="line">    printPersion2(<span class="string">'name'</span>,<span class="number">18</span>,<span class="string">'zhang'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>方法对象</p><ul><li>方法可作为对象赋值给其它变量</li><li>方法可作为参数传递给其它方法<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    <span class="built_in">Function</span> func = printHello;</span><br><span class="line">    func();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> printHello()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//方法作为参数</span></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    <span class="keyword">var</span> list = [<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>];</span><br><span class="line">    <span class="built_in">print</span>(listTimes(list, times)); <span class="comment">// [hhh, eee, lll, lll, ooo]</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">List</span> listTimes(<span class="built_in">List</span> list, <span class="built_in">String</span> f(str))&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>;index &lt;list.length;index++)&#123;</span><br><span class="line">        list[index] = f(list[index]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">String</span> times(str)&#123;</span><br><span class="line">    <span class="keyword">return</span> str *<span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>匿名方法</p><ul><li>（参数1，参数2，。。。）{<br>  方法体。。<br>  return 返回值<br>}</li><li>匿名方法特性<ul><li>可赋值给变量，通过变量进行调用</li><li>可在其它方法中直接调用或者传递给其它方法</li></ul></li></ul></li></ol><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    <span class="comment">// 不能写在外面</span></span><br><span class="line">    <span class="keyword">var</span> fn = (str)&#123;</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'hello-$str'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    fn(<span class="string">'world'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    <span class="keyword">var</span> list = [<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>];</span><br><span class="line">    listTimes(list, (str)&#123;str *<span class="number">3</span>&#125;);</span><br><span class="line">    listTimes2(list);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">List</span> listTimes(<span class="built_in">List</span> list, <span class="built_in">String</span> f(str))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>;index &lt;list.length;index++)&#123;</span><br><span class="line">            list[index] = f(list[index]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="built_in">List</span> listTimes2(<span class="built_in">List</span> list)&#123;</span><br><span class="line">        <span class="keyword">var</span> func = (str)&#123;<span class="keyword">return</span> str *<span class="number">3</span>&#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>;index &lt;list.length;index++)&#123;</span><br><span class="line">            list[index] = func(list[index]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>闭包<ul><li>闭包是一个方法（对象）</li><li>闭包定义在其它方法内部</li><li>闭包能够访问外部方法内的局部变量，并持有其状态<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> func = a();</span><br><span class="line">  func(); <span class="comment">// 0</span></span><br><span class="line">  func(); <span class="comment">//1</span></span><br><span class="line">  func(); <span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">var</span>  fn = b();</span><br><span class="line">  fn();</span><br><span class="line">  fn();</span><br><span class="line">  fn();</span><br><span class="line">&#125;</span><br><span class="line">a()&#123;</span><br><span class="line">  <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">  printCount()&#123;</span><br><span class="line">    <span class="built_in">print</span>(count++);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> printCount; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">b()&#123;</span><br><span class="line">  <span class="built_in">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 匿名函数闭包</span></span><br><span class="line">  <span class="keyword">return</span> ()&#123;</span><br><span class="line">    <span class="built_in">print</span>(count++);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h6 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h6><ul><li>类与对象，声明，创建及基本特性</li><li>构造方法及初始化列表</li><li>静态成员及对象操作符的使用<ol><li>类与对象</li></ol></li><li>使用关键字class声明一个类</li><li>使用关键字new创建一个对象，new可以省略</li><li>所有对象都继承于Object类</li></ul><ol start="2"><li>属性与方法</li></ol><ul><li>属性默认会生成getter和setter方法</li><li>使用final声明的属性只有getter方法</li><li>属性和方法通过.访问</li><li>方法不能被重载<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">  person.name = <span class="string">'zhangsan'</span>;</span><br><span class="line">  person.a = <span class="number">18</span>;</span><br><span class="line">  <span class="built_in">print</span>(person.name);</span><br><span class="line">  person.work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="built_in">int</span> a;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> address =<span class="string">'yyy'</span>;</span><br><span class="line"> <span class="keyword">void</span> work()&#123;</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">'姓名：$name,age$a'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>类及成员可见性</li></ol><ul><li>dart中的可见性以library（库）为单位</li><li>默认情况下，每个dart文件就是一个库</li><li>使用_表示库的私有性</li><li>使用import导入库<ol start="4"><li>计算属性</li></ol><ul><li>计算属性的值是通过计算而来的，本身不存储值</li><li>计算属性赋值，其实是通过计算转换到其它实例变量<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> rect = <span class="keyword">new</span> Rectangle();</span><br><span class="line">  rect.height = <span class="number">20</span>;</span><br><span class="line">  rect.width = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">print</span>(rect.aera);</span><br><span class="line">  rect.aera = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span></span>&#123;</span><br><span class="line">  <span class="built_in">num</span> width,height;</span><br><span class="line">  <span class="built_in">num</span> <span class="keyword">get</span> aera =&gt; width * height;</span><br><span class="line">      <span class="keyword">set</span> aera(value)&#123;</span><br><span class="line">        width = value / <span class="number">2</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ol start="5"><li><p>构造方法（创建对象时调用的方法）</p><ul><li>如果没有自定义构造方法，则会有个默认构造方法</li><li>如果存在自定义构造方法，则默认构造方法无效</li><li>构造方法不能重载</li><li>命名构造方法</li></ul><ul><li>使用命名构造方法，可以实现多个构造方法</li><li>使用类名.方法的形式实现<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="number">18</span>,<span class="string">'张三'</span>,<span class="string">'Male'</span>);</span><br><span class="line">  person.work();</span><br><span class="line">  <span class="keyword">new</span> Person.widthName(<span class="string">'sssss'</span>,<span class="string">'final'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"> <span class="built_in">int</span> age;</span><br><span class="line"> <span class="built_in">String</span> name;</span><br><span class="line"> <span class="keyword">final</span> <span class="built_in">String</span> Gender;</span><br><span class="line"> <span class="comment">// 默认构造函数</span></span><br><span class="line"><span class="comment">//  Person()&#123;&#125;</span></span><br><span class="line"><span class="comment">// 自定义构造函数</span></span><br><span class="line">  <span class="comment">// Person(int age,String name)&#123;</span></span><br><span class="line">  <span class="comment">//   this.age = age;</span></span><br><span class="line">  <span class="comment">//   this.name = name;</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">  <span class="comment">// 语法糖形式的构造函数，参数赋值在函数运行之前执行,所以可以给final赋值</span></span><br><span class="line">  Person(<span class="keyword">this</span>.age,<span class="keyword">this</span>.name,<span class="keyword">this</span>.Gender);</span><br><span class="line">  <span class="comment">// 多个构造方法的实现</span></span><br><span class="line">   Person.widthName(<span class="keyword">this</span>.name,<span class="keyword">this</span>.Gender);</span><br><span class="line">  work()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'姓名$name,年龄$age'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li>常量构造方法(运行时更快，因为编译期已经确定)<ul><li>如果类是不可变状态，可以把对象定义为编译时常量</li><li>使用const声明构造方法，并且所以变量都为final</li><li>使用const声明对象，可以省略<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">const</span> person = <span class="keyword">const</span> <span class="keyword">new</span> Person(<span class="number">18</span>,<span class="string">'张三'</span>,<span class="string">'Male'</span>);</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line"> <span class="keyword">final</span> <span class="built_in">int</span> age;</span><br><span class="line"> <span class="keyword">final</span> <span class="built_in">String</span> name;</span><br><span class="line"> <span class="keyword">final</span> <span class="built_in">String</span> Gender;</span><br><span class="line"> <span class="keyword">const</span> Person(<span class="keyword">this</span>.age,<span class="keyword">this</span>.name,<span class="keyword">this</span>.Gender);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>工厂构造方法</p><ul><li>工厂构造方法类似与设计模式中的工厂模式</li><li>在构造方法前添加关键字factory实现一个工厂构造方法</li><li>在工厂构造方法中可返回对象</li></ul></li><li><p>初始化列表</p><ul><li>初始化列表会在构造方法体执行前执行</li><li>使用逗号分隔初始化表达式</li><li>初始化列表常用于设置final变量的值<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> gender;</span><br><span class="line">  Person(<span class="built_in">Map</span> map):name=map[<span class="string">'name'</span>],gender = map[<span class="string">'gender'</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>静态成员</p><ul><li>使用static关键字来实现类级别的变量和函数</li><li>静态成员不能访问非静态成员，非静态成员可以访问静态成员</li><li>类中的常量需要使用static const声明<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line"> <span class="keyword">var</span> page = <span class="keyword">new</span> Page();</span><br><span class="line"> Page.down();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span> </span>&#123;</span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">const</span> currentMax = <span class="number">20</span>;</span><br><span class="line"> <span class="keyword">static</span> <span class="built_in">int</span> currentPage = <span class="number">1</span>;</span><br><span class="line"> <span class="keyword">static</span> <span class="keyword">void</span> down()&#123;</span><br><span class="line">    currentPage = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'down'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> up()&#123;</span><br><span class="line">    currentPage ++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>对象操作符</p><ul><li><p>条件成员访问：?.</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line"> Person person;</span><br><span class="line"> <span class="comment">// 如果这个对象没有实例化就不往后执行，可以解决空指针异常</span></span><br><span class="line"> person?.work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> age = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">String</span> name = <span class="string">'zhan'</span>;</span><br><span class="line">  <span class="keyword">void</span> work()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'age$age'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类型转换：as</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">    <span class="comment">//person 类型不确定可以用as</span></span><br><span class="line"> <span class="keyword">var</span> person;</span><br><span class="line">     person = <span class="string">''</span>;</span><br><span class="line">     person = <span class="keyword">new</span> Person();</span><br><span class="line">     (person <span class="keyword">as</span> Person).work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> age = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">String</span> name = <span class="string">'zhan'</span>;</span><br><span class="line">  <span class="keyword">void</span> work()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'age$age'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>是否指定类型</p></li></ul><ul><li>is，is!<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line"> <span class="keyword">var</span> person;</span><br><span class="line">     person = <span class="string">''</span>;</span><br><span class="line">     person = <span class="keyword">new</span> Person();</span><br><span class="line">     <span class="keyword">if</span>(person <span class="keyword">is</span> Person)&#123;</span><br><span class="line">        person.work();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> age = <span class="number">10</span>;</span><br><span class="line">  <span class="built_in">String</span> name = <span class="string">'zhan'</span>;</span><br><span class="line">  <span class="keyword">void</span> work()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'age$age'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>级联操作：..<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">new</span> Person()</span><br><span class="line">  ..age = <span class="number">12</span></span><br><span class="line">  ..name = <span class="string">'zhangsan'</span></span><br><span class="line">  ..work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">void</span> work()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'age-$age'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>对象call方法</p><ul><li>如果类实现了call方法，则该类的对象可以作为方法使用<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; args) &#123;</span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">  person.age = <span class="number">18</span>;</span><br><span class="line">  <span class="built_in">print</span>(person());</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">String</span> call()&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'age-$age'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h5 id="面向对象扩展"><a href="#面向对象扩展" class="headerlink" title="面向对象扩展"></a>面向对象扩展</h5><ol><li>继承<ul><li>使用关键字extends继承一个类</li><li>子类会继承父类可见的属性和方法，不会继承构造方法</li><li>子类能够复写父类的方法，getter和setter</li><li>单继承，多态性</li></ul></li><li>继承中的构造方法<ul><li>子类的构造方法默认会调用父类的无名无参构造方法</li><li>如果父类没有无名无参构造放法，则需要显示调用父类构造方法</li><li>在构造方法参数后使用 ： 显示调用父类构造方法</li></ul></li><li>构造方法执行顺序<ul><li>父类的构造方法在子类构造方法体开始执行的位置调用</li><li>如果有初始化列表，初始化列表会在父类构造方法之前执行</li></ul></li><li>抽象类<ul><li>抽象类使用abstract表示，不能直接被实例化</li><li>抽象方法不用abstract修饰，无实现</li><li>抽象类可以没有抽象方法</li><li>有抽象方法的类一定得声明为抽象类</li></ul></li><li><p>接口</p><ul><li>类和接口是统一的，类就是接口</li><li>每个类都隐式的定义了一个包含所有实例成员的接口</li><li>如果是复用已有类的实现，使用继承（exdends）</li><li>如果只是使用已有类的外在行为，使用接口<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">  person.run();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="built_in">int</span> <span class="keyword">get</span> age =&gt; <span class="number">18</span>;</span><br><span class="line">  run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'run Person..'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="comment">// <span class="doctag">TODO:</span> implement age</span></span><br><span class="line">  <span class="built_in">int</span> <span class="keyword">get</span> age =&gt; <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement run</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Mixins</p><ul><li><p>Mixins 类似于多继承，是在多类继承中重用一个类代码的方式</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果 多继承中有相同的方法，则优先执行类C中的方法</span></span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">new</span> D();</span><br><span class="line">  d.a();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> a()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'A.a()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> b()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'B.b()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> a()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'B.a()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">void</span> c()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'C.c()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> a()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'c.a()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">A</span> <span class="title">with</span> <span class="title">B</span>,<span class="title">C</span>  </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>作为Mixins的类不能有显示声明构造方法</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="keyword">new</span> D();</span><br><span class="line">  d.a();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> a()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'A.a()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="keyword">void</span> b()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'B.b()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> a()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'B.a()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">  C()&#123;&#125;  <span class="comment">// 错误。不能有显示构造方法</span></span><br><span class="line">  <span class="keyword">void</span> c()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'C.c()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">void</span> a()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'c.a()...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">A</span> <span class="title">with</span> <span class="title">B</span>,<span class="title">C</span>  </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>作为Mixins的类只能继承自Object</p></li><li>使用关键字with连接一个或多个Mixins<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  <span class="keyword">var</span> car = <span class="keyword">new</span> Car();</span><br><span class="line">  car.work();</span><br><span class="line">  car.name = <span class="string">'轮胎'</span>;</span><br><span class="line">  car.run();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Engine</span></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> work();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Diandong</span> <span class="keyword">implements</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> work() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement work</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'diandong...'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Caiyou</span> <span class="keyword">implements</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> work() &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> implement work</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Caiyou'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tyre</span> </span>&#123;</span><br><span class="line">  <span class="built_in">String</span> name;</span><br><span class="line">  <span class="keyword">void</span> run()&#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'$name'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> = <span class="title">Tyre</span> <span class="title">with</span> <span class="title">Caiyou</span>;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>操作符覆写（重载运算符）</p><ul><li>覆写操作符需要在类中定义<br>返回类型 operator 操作符（参数1，参数2…）{<br>  实现体<br>  return 返回值<br>}<ul><li>如果覆写==，还需要覆写对象的hashCode  getter方法 <figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="number">20</span>);</span><br><span class="line">  <span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="number">21</span>);</span><br><span class="line">  <span class="built_in">print</span>(person1 &gt; person2);</span><br><span class="line">  person1.age;</span><br><span class="line">  <span class="built_in">print</span>(person1[<span class="string">'age'</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> age;</span><br><span class="line">  Person(<span class="keyword">this</span>.age);</span><br><span class="line">  <span class="built_in">bool</span>  <span class="keyword">operator</span> &gt; (Person person)&#123;</span><br><span class="line">     <span class="built_in">print</span>(<span class="string">'this.age<span class="subst">$&#123;<span class="keyword">this</span>.age&#125;</span>'</span>);</span><br><span class="line">     <span class="built_in">print</span>(person.age);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age &gt; person.age;</span><br><span class="line">   </span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">int</span> <span class="keyword">operator</span> [] (<span class="built_in">String</span> str)&#123;</span><br><span class="line">    <span class="keyword">if</span>(str == <span class="string">'age'</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>枚举</p><ul><li>枚举是一种有穷序列集的数据类型</li><li>使用关键字enum定义一个枚举</li><li><p>常用于代替常量，控制语句等</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> Season &#123;</span><br><span class="line">    spring,</span><br><span class="line">    summer,</span><br><span class="line">    autumn,</span><br><span class="line">    winter</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">    <span class="keyword">var</span> currentSeason = Season.autumn;</span><br><span class="line">    currentSeason.index <span class="comment">// 0</span></span><br><span class="line">    <span class="keyword">switch</span>(currentSeason)&#123;</span><br><span class="line">        <span class="keyword">case</span> Season.spring:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'1-3'</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> Season.summer: </span><br><span class="line">             <span class="built_in">print</span>(<span class="string">'4-6'</span>);</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>dart 枚举特性</p><ul><li>index从0开始，依次累加</li><li>不能指定原始值</li><li>不能添加方法</li></ul></li></ul></li><li><p>泛型</p><ul><li>dart中类型是可选的，可使用泛型限定类型</li><li>使用泛型能够有效的减少代码重复</li><li><p>类的泛型</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> list = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">  list.add(<span class="string">'1'</span>);</span><br><span class="line">  <span class="keyword">var</span> utls = <span class="keyword">new</span> Utils&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line">  utls.put(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Utils</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  T element;</span><br><span class="line">  <span class="keyword">void</span> put(T element)&#123;</span><br><span class="line">   <span class="keyword">this</span>.element = element;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法的泛型</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> main()&#123;</span><br><span class="line">  <span class="keyword">var</span> list = <span class="keyword">new</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;();</span><br><span class="line">  list.add(<span class="string">'1'</span>);</span><br><span class="line">  <span class="keyword">var</span> utils = <span class="keyword">new</span> Utils();</span><br><span class="line">  utils.put&lt;<span class="built_in">String</span>&gt;(<span class="string">'string'</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Utils</span></span>&#123;</span><br><span class="line">  <span class="keyword">void</span> put&lt;T&gt;(T element)&#123;</span><br><span class="line">    <span class="built_in">print</span>(element);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;dart-概述&quot;&gt;&lt;a href=&quot;#dart-概述&quot; class=&quot;headerlink&quot; title=&quot;dart 概述&quot;&gt;&lt;/a&gt;dart 概述&lt;/h6&gt;&lt;ol&gt;
&lt;li&gt;dart 是Google发布的一门开源编程语言&lt;/li&gt;
&lt;li&gt;dart 初期目标是成
      
    
    </summary>
    
    
      <category term="dart" scheme="http://myzhangning.top/tags/dart/"/>
    
  </entry>
  
  <entry>
    <title>nuxtjs</title>
    <link href="http://myzhangning.top/2019/01/01/nuxtjs/"/>
    <id>http://myzhangning.top/2019/01/01/nuxtjs/</id>
    <published>2019-01-01T13:35:01.000Z</published>
    <updated>2019-01-01T14:52:35.933Z</updated>
    
    <content type="html"><![CDATA[<h5 id="nuxt-js-工作流"><a href="#nuxt-js-工作流" class="headerlink" title="nuxt.js 工作流"></a>nuxt.js 工作流</h5><img src="/2019/01/01/nuxtjs/nuxtjsyuanli.png" title="nuxtjs工作流"><ol><li>Incoming Request 浏览器发起请求</li><li>nuxtServerInit 服务端接受请求检查nuxtServerInit配置项是否存在，Strore action 用来操作vuex</li><li>middleware 中间件</li><li>validate() 配合高级路由做动态验证 例如页面是否可以跳转</li><li>asyncDate() &amp; fetch() 用来获取数据<br> asyncDate() 获取的数据用于渲染vue组件<br> fetch() 用于修改vuex的</li><li>Render 渲染</li></ol><h5 id="nuxtjs-安装-（Nuxt-js-with-Koa）"><a href="#nuxtjs-安装-（Nuxt-js-with-Koa）" class="headerlink" title="nuxtjs 安装 （Nuxt.js with Koa）"></a>nuxtjs 安装 （Nuxt.js with Koa）</h5><ol><li>网址：<a href="https://github.com/nuxt-community/koa-template" target="_blank" rel="noopener">https://github.com/nuxt-community/koa-template</a></li><li>vue init nuxt-community/koa-template nuxt-pro<h5 id="nuxtjs-目录"><a href="#nuxtjs-目录" class="headerlink" title="nuxtjs 目录"></a>nuxtjs 目录</h5><img src="/2019/01/01/nuxtjs/directory.png" title="nuxtjs目录"></li><li>backpack.config.js 后端编译脚本</li><li>build 编译完后的目录</li><li>components 放置vue组件</li><li>layouts 模版</li><li>pages 页面入口</li><li>server koa相关的程序</li><li>stroe vuex目录，有这个目录就会默认启用vuex（创建即配置）</li><li>npm install eslint-plugin-html@^3 (如eslint报错)</li><li>路由：创建一个页面，文件名即是路由（创建即配置）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;nuxt-js-工作流&quot;&gt;&lt;a href=&quot;#nuxt-js-工作流&quot; class=&quot;headerlink&quot; title=&quot;nuxt.js 工作流&quot;&gt;&lt;/a&gt;nuxt.js 工作流&lt;/h5&gt;&lt;img src=&quot;/2019/01/01/nuxtjs/nuxtjsyu
      
    
    </summary>
    
    
      <category term="vuejs" scheme="http://myzhangning.top/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>vue3.0</title>
    <link href="http://myzhangning.top/2018/12/19/vue3/"/>
    <id>http://myzhangning.top/2018/12/19/vue3/</id>
    <published>2018-12-19T15:00:00.000Z</published>
    <updated>2019-01-01T13:49:16.533Z</updated>
    
    <content type="html"><![CDATA[<h5 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h5><ol><li>npm install -g @vue/cli   # OR yarn global add @vue/cli<h5 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h5></li><li>vue -V<h5 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h5></li><li>vue create vue-style<h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5></li><li>npm run serve<h5 id="路由安装与配置"><a href="#路由安装与配置" class="headerlink" title="路由安装与配置"></a>路由安装与配置</h5></li><li>npm i vue-router</li><li>src 下创建router.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"><span class="keyword">import</span> pageA <span class="keyword">from</span> <span class="string">'a.vue'</span></span><br><span class="line"><span class="keyword">import</span> pageB <span class="keyword">from</span> <span class="string">'b.vue'</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'pageA'</span>,</span><br><span class="line">        component: pageA</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"><span class="comment">//main.js 中</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    router</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br><span class="line"><span class="comment">// 根目录下创建vue.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    runtimeCompiler: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// public/index.html</span></span><br><span class="line">   &lt;div id=<span class="string">'app'</span>&gt;</span><br><span class="line">       &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">   &lt;div&gt;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;npm install -g @vue/cli   # OR yarn global add @vue/cli&lt;
      
    
    </summary>
    
    
      <category term="vuejs" scheme="http://myzhangning.top/tags/vuejs/"/>
    
  </entry>
  
  <entry>
    <title>23种设计模式介绍</title>
    <link href="http://myzhangning.top/2018/10/16/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D/"/>
    <id>http://myzhangning.top/2018/10/16/23种设计模式介绍/</id>
    <published>2018-10-16T09:00:00.000Z</published>
    <updated>2018-10-25T13:48:20.415Z</updated>
    
    <content type="html"><![CDATA[<h5 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h5><ol><li>工厂模式 （工厂方法模式、抽象工厂模式、建造者模式–js并没有分那么清）</li></ol><ul><li>将new操作单独封装</li><li>遇到new时就要考虑是否使用工厂模式</li></ul><p>使用场景:</p><ul><li>JQuery()-$(‘div’)</li><li>React.createElement</li><li>vue异步组件</li><li>vuex 和redux 中的 store</li></ul><p>使用场景验证:</p><ul><li>构造函数和创建者分离</li><li>符合开放封闭原则<br>代码示例:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 工厂模式 不用new 直接使用，内部实现new</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">    &#125;</span><br><span class="line">    init()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'init'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator</span></span>&#123;</span><br><span class="line">   create()&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> Product(name)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> name = <span class="keyword">new</span> Creator(<span class="string">'p1'</span>)</span><br><span class="line"> <span class="keyword">let</span> a = name.create()</span><br><span class="line"> a.init()</span><br></pre></td></tr></table></figure><ol start="2"><li>单例模式</li></ol><ul><li>系统中被唯一使用</li><li>一个类只有一个实例<br>理解：如果有了直接用，没有的话去做初始化操作，保证只有一个实例<br>使用场景验证:</li><li>符合单一职责原则，只实例化唯一的对象</li><li>没法具体开放封闭原则，但是绝对不违反开放封闭原则<br>代码示例:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SingleObject1</span></span>&#123;</span><br><span class="line">     login()&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(<span class="string">'login..'</span>)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 自执行函数，防治Instence变量污染</span></span><br><span class="line"> SingleObject1.getInstence = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">let</span> Instence</span><br><span class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">if</span>(!Instence)&#123;</span><br><span class="line">             Instence = <span class="keyword">new</span> SingleObject1()</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> SingleObject1</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;)()</span><br><span class="line"><span class="keyword">let</span> obj1 = SingleObject1.getInstence()</span><br><span class="line">obj1.login()</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>原型模式</li></ol><h5 id="结构型"><a href="#结构型" class="headerlink" title="结构型"></a>结构型</h5><ol><li>适配器模式</li></ol><ul><li>旧接口格式与使用者不兼容</li><li>中间加一个适配转换接口</li></ul><ol start="2"><li>装饰器模式</li></ol><ul><li>为对象添加新功能</li><li>不改变原有的结构和功能<br>使用场景:</li><li>ES7 装饰器</li><li>core-decorators(js库)<br>代码示例:<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 装饰器模式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span>&#123;</span><br><span class="line">   draw()&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'画一个圆'</span>)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(circle)&#123;</span><br><span class="line">        <span class="keyword">this</span>.circle = circle</span><br><span class="line">    &#125;</span><br><span class="line">    draw()&#123;</span><br><span class="line">        <span class="keyword">this</span>.circle.draw()</span><br><span class="line">        <span class="keyword">this</span>.setReader(circle)</span><br><span class="line">    &#125;</span><br><span class="line">    setReader(circle)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'设置边框'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> circle = <span class="keyword">new</span> Circle()</span><br><span class="line">circle.draw()</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'------------------'</span>)</span><br><span class="line"><span class="keyword">let</span> dec = <span class="keyword">new</span> Decorator(circle)</span><br><span class="line">dec.draw()</span><br><span class="line"></span><br><span class="line"><span class="comment">//装饰器的原理</span></span><br><span class="line">@decorator</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line">A = decorator(A) || A;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>代理模式</li><li>外观模式</li></ol><ul><li>为子系统中的一组接口提供了一个高层接口</li><li>使用者使用这个高级接口<br>使用场景验证:</li><li>不符合单一职责原则和开放封闭原则，因此谨慎使用，不可滥用</li></ul><ol start="5"><li>桥接模式</li><li>组合模式</li><li>享元模式<h5 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h5></li><li>策略模式</li><li>模板方法模式</li><li>观察者模式</li></ol><ul><li>发布 &amp;订阅</li><li>一对多<br>使用场景:</li><li>网页事件绑定</li><li>Promise</li><li>jquery Callbacks<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> callback = $.Callbacks()</span><br><span class="line">callback.add(<span class="function"><span class="keyword">function</span>(<span class="params">info</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn1'</span>,info)</span><br><span class="line">&#125;)</span><br><span class="line">callback.add(<span class="function"><span class="keyword">function</span>(<span class="params">info</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn2'</span>,info)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 添加订阅者</span></span><br><span class="line">callback.fire(<span class="string">'iii'</span>)</span><br></pre></td></tr></table></figure></li></ul><p>代码示例:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//发布者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="number">0</span></span><br><span class="line">        <span class="comment">//订阅者集合</span></span><br><span class="line">        <span class="keyword">this</span>.observers = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取发布状态</span></span><br><span class="line">    getState()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.state</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 发布状态</span></span><br><span class="line">    setState(state)&#123;</span><br><span class="line">        <span class="keyword">this</span>.state = state</span><br><span class="line">        <span class="comment">// 通知订阅者做更新</span></span><br><span class="line">       <span class="keyword">this</span>.notifyObserver()</span><br><span class="line">    &#125;</span><br><span class="line">    notifyObserver()&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.forEach(<span class="function"><span class="params">observer</span> =&gt;</span>&#123;</span><br><span class="line">            observer.updated()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把订阅的人员push进数组</span></span><br><span class="line">    attach(observer)&#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.push(observer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 订阅者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,subject)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name</span><br><span class="line">        <span class="keyword">this</span>.subject = subject</span><br><span class="line">        <span class="keyword">this</span>.subject.attach(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    updated()&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>-uptate,state:<span class="subst">$&#123;<span class="keyword">this</span>.subject.getState()&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> Subject()</span><br><span class="line"><span class="keyword">let</span> o1 = <span class="keyword">new</span> Observer(<span class="string">'zhangsan'</span>,s)</span><br><span class="line">s.setState(<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><ul><li>nodejs 自定义事件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Emitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter</span><br><span class="line"><span class="keyword">const</span> emitter1 = <span class="keyword">new</span> Emitter()</span><br><span class="line">emitter1.on(<span class="string">'some'</span>,(info)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'f1'</span>,info)</span><br><span class="line">&#125;)</span><br><span class="line">emitter1.on(<span class="string">'some'</span>,(info)=&gt;&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'f2'</span>,info)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 订阅者</span></span><br><span class="line">emitter1.emit(<span class="string">'some'</span>,<span class="string">'yyy'</span>)</span><br></pre></td></tr></table></figure></li></ul><ol start="4"><li>迭代器模式</li><li>职责链模式</li><li>命令模式</li><li>备忘录模式</li><li>状态模式</li><li>访问者模式</li><li>中介者模式</li><li>解释器模式 </li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;创建型&quot;&gt;&lt;a href=&quot;#创建型&quot; class=&quot;headerlink&quot; title=&quot;创建型&quot;&gt;&lt;/a&gt;创建型&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;工厂模式 （工厂方法模式、抽象工厂模式、建造者模式–js并没有分那么清）&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;将ne
      
    
    </summary>
    
    
      <category term="Javascript设计模式" scheme="http://myzhangning.top/tags/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>SOLID五大设计原则</title>
    <link href="http://myzhangning.top/2018/10/15/solid%E4%BA%94%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
    <id>http://myzhangning.top/2018/10/15/solid五大设计原则/</id>
    <published>2018-10-15T07:00:00.000Z</published>
    <updated>2018-10-18T16:05:15.744Z</updated>
    
    <content type="html"><![CDATA[<h5 id="五大设计原则"><a href="#五大设计原则" class="headerlink" title="五大设计原则"></a>五大设计原则</h5><ol><li>S - 单一职责原则 The Single-Responsibility Principle (SRP)</li></ol><ul><li>一个程序只做好一件事</li><li>如果功能过于复杂就拆分开，每个部分保持独立</li></ul><ol start="2"><li>o - 开放封闭原则 The Open/Closed Principle (OCP)</li></ol><ul><li>对扩展开放，对修改封闭</li><li>增加需求时，扩展新代码，而非修改已有代码</li><li>这是软件设计的终极目标</li></ul><ol start="3"><li>L - 李氏置换原则 The Liskov Substitution Principle (LSP)</li></ol><ul><li>子类能覆盖父类</li><li>父类能出现的地方子类就能出现</li><li>js 中使用较少（弱类型 &amp; 继承使用较少）</li></ul><ol start="4"><li>I - 接口独立原则 The Interface Segregation Principle (ISP)</li></ol><ul><li>保持接口的单一独立，避免出现“胖接口”</li><li>js中没有接口（typescript例外），使用较少</li><li>类似于单一职责原则，这里更关注接口</li></ul><ol start="5"><li>D - 依赖导致原则 The Dependency-Inversion Principle (DIP)</li></ol><ul><li>面向接口编程，依赖于抽象而不依赖于具体</li><li>使用方只关注接口而不关注具体类的实现</li><li>js使用较少（没有接口 &amp; 弱类型）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;五大设计原则&quot;&gt;&lt;a href=&quot;#五大设计原则&quot; class=&quot;headerlink&quot; title=&quot;五大设计原则&quot;&gt;&lt;/a&gt;五大设计原则&lt;/h5&gt;&lt;ol&gt;
&lt;li&gt;S - 单一职责原则 The Single-Responsibility Principle (
      
    
    </summary>
    
      <category term="JavaScript设计模式" scheme="http://myzhangning.top/categories/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Javascript设计模式" scheme="http://myzhangning.top/tags/Javascript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>UML类图</title>
    <link href="http://myzhangning.top/2018/10/13/%08UML_leitu/"/>
    <id>http://myzhangning.top/2018/10/13/UML_leitu/</id>
    <published>2018-10-13T15:00:00.000Z</published>
    <updated>2018-10-18T15:56:35.236Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Unified-Modeling-Language-统一建模语言"><a href="#Unified-Modeling-Language-统一建模语言" class="headerlink" title="Unified Modeling Language 统一建模语言"></a>Unified Modeling Language 统一建模语言</h4><h4 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h4><pre><code>名字-&gt;属性-&gt;方法</code></pre><h4 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h4><ol><li>泛化，表示继承</li><li>关联，表示引用</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Unified-Modeling-Language-统一建模语言&quot;&gt;&lt;a href=&quot;#Unified-Modeling-Language-统一建模语言&quot; class=&quot;headerlink&quot; title=&quot;Unified Modeling Language 统一
      
    
    </summary>
    
      <category term="JavaScript设计模式" scheme="http://myzhangning.top/categories/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>面向对象</title>
    <link href="http://myzhangning.top/2018/10/11/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>http://myzhangning.top/2018/10/11/面向对象/</id>
    <published>2018-10-11T12:30:00.000Z</published>
    <updated>2018-10-18T15:56:08.778Z</updated>
    
    <content type="html"><![CDATA[<h3 id="面向对象三要素"><a href="#面向对象三要素" class="headerlink" title="面向对象三要素"></a>面向对象三要素</h3><ol><li>继承 – 子类继承父类</li><li>封装 – 数据的封装和保密 (继承可将公共方法抽离出来，提高复用，减少冗余，不该外漏的不外漏)<br> public 完全开放       protected 对子类开放<br> private 对自己开放，私有的<br> ES6 尚不支持，可以用typescript 演示</li><li>多态 – 同一接口不同实现<br> js 应用极少，需要结合Java 等语言的接口、重写、重载等功能<h3 id="为什么要使用面向对象"><a href="#为什么要使用面向对象" class="headerlink" title="为什么要使用面向对象"></a>为什么要使用面向对象</h3><ol><li>程序执行:顺序、判断、循环— 结构化</li><li>面向对象—-数据结构化</li><li>对于计算机，结构化的才是最简单的</li><li>编程应该 简单&amp;抽象</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;面向对象三要素&quot;&gt;&lt;a href=&quot;#面向对象三要素&quot; class=&quot;headerlink&quot; title=&quot;面向对象三要素&quot;&gt;&lt;/a&gt;面向对象三要素&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;继承 – 子类继承父类&lt;/li&gt;
&lt;li&gt;封装 – 数据的封装和保密 (继承可将公共方法
      
    
    </summary>
    
      <category term="JavaScript设计模式" scheme="http://myzhangning.top/categories/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>h5远程调试</title>
    <link href="http://myzhangning.top/2018/09/18/h5debug/"/>
    <id>http://myzhangning.top/2018/09/18/h5debug/</id>
    <published>2018-09-18T09:30:00.000Z</published>
    <updated>2018-09-19T15:34:56.813Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Weinre"><a href="#Weinre" class="headerlink" title="Weinre"></a>Weinre</h4><ol><li>Weinre(Web Inspector Remote)是一款基于Web Inspector(Webkit)的远程调试工具， 它使用JS编写， 可以让我们在电脑上直接调试运行在手机上的远程页面。 与传统的Web Inspector的使用场景不同， 调试的页面在手机上， 调试工具在PC的chrome， 二者通过网络连接通信。<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4></li><li>Weinre是基于nodejs实现的， 使用它必须先安装node运行环境，如果你是Mac/Linux用户， 还需要在前面加入”sudo”:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[sudo] npm -g install weinre</span><br></pre></td></tr></table></figure></li></ol><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">weinre --httpPort 8082 --boundHost -all-</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Weinre&quot;&gt;&lt;a href=&quot;#Weinre&quot; class=&quot;headerlink&quot; title=&quot;Weinre&quot;&gt;&lt;/a&gt;Weinre&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;Weinre(Web Inspector Remote)是一款基于Web Inspector(W
      
    
    </summary>
    
      <category term="HTML5" scheme="http://myzhangning.top/categories/HTML5/"/>
    
    
  </entry>
  
  <entry>
    <title>videojs 使用小结</title>
    <link href="http://myzhangning.top/2018/09/18/videojs/"/>
    <id>http://myzhangning.top/2018/09/18/videojs/</id>
    <published>2018-09-18T08:24:00.000Z</published>
    <updated>2018-09-19T15:26:04.886Z</updated>
    
    <content type="html"><![CDATA[<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li>videojs初始化完毕后，.vjs-tech 为DOM结构里的实际的video标签</li><li>videojs 的初始化参数有多重配置方式，建议以标签属性的方式来配置</li><li>x5 开头的标签只对腾讯 x5 内核的浏览器有效，即微信、QQ浏览器，所有的属性见 <a href="https://x5.tencent.com/tbs/guide/video.html" target="_blank" rel="noopener">H5同层播放器接入规范</a></li><li>不自动全屏播放设置 webkit-playsinline playsinline x5-playsinline</li><li>【安卓】启用H5同层播放器 x5-video-player-type=”h5” 启用后微信、QQ浏览器里，不会使用腾讯的默认播放器。这里如果不启用，则使用腾讯的播放器，videojs 控制不了，会显示播放控件，如果启用了，则使用          html5 默认行为来播放，videojs 可以控制，但一定会全屏播放</li><li><a href="https://videojs.com" target="_blank" rel="noopener">videojs官网</a> </li><li><a href="https://github.com/videojs" target="_blank" rel="noopener">videojs Github</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;videojs初始化完毕后，.vjs-tech 为DOM结构里的实际的video标签&lt;/li&gt;
&lt;li&gt;videojs 的初始化
      
    
    </summary>
    
      <category term="h5直播" scheme="http://myzhangning.top/categories/h5%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="h5直播" scheme="http://myzhangning.top/tags/h5%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>http2优势</title>
    <link href="http://myzhangning.top/2018/09/02/http2/"/>
    <id>http://myzhangning.top/2018/09/02/http2/</id>
    <published>2018-09-02T08:30:00.000Z</published>
    <updated>2018-09-02T09:15:47.307Z</updated>
    
    <content type="html"><![CDATA[<h1 id="信道复用"><a href="#信道复用" class="headerlink" title="信道复用"></a>信道复用</h1><h1 id="分帧传输"><a href="#分帧传输" class="headerlink" title="分帧传输"></a>分帧传输</h1><ol><li>http2的分帧传输，在同一个连接上面可以并发的发送不同的请求</li><li>传输的一个http数据并不需要一定按照连续的顺序进行发送，而是可以分成不同的帧，然后一起进行发送，如果中间部分先到服务器也没关系，最后会把数据接收完之后，根据一个帧信息里面包含的先后顺序，在进行组合，拿到一个真正的数据</li></ol><h1 id="server-push"><a href="#server-push" class="headerlink" title="server push"></a>server push</h1><ol><li>传统的http1.1中客户端是主动的，服务端是被动的</li><li>在http1.1中如果一个页面加载过来有很多资源，比如图片，css，js 这些请求是并发的去发送，并发的过程中需要创建并发的http连接，浏览器有并发限制，像Chrome中只有6个，如果一次并发超过6个剩下的一些需要等待前6个拿到服务器的返回之后，才能继续发送请求，所以这个时候就会变成相对串行的操作，效率就不是很高</li><li>建立不同的连接，如果有一起创建6个tcp连接，需要进行tcp的6次三次握手，创建连接的开销是比较大的，同时对于一个服务器来讲，他可以创建的tcp连接数是有一个上限的，所以每次都创建6个tcp连接，会导致服务器的tcp连接数很快的消耗完，所以在http1.1中受到很大的制约</li></ol><h1 id="为什么不能在一个tcp连接上面去发送请求呢？"><a href="#为什么不能在一个tcp连接上面去发送请求呢？" class="headerlink" title="为什么不能在一个tcp连接上面去发送请求呢？"></a>为什么不能在一个tcp连接上面去发送请求呢？</h1><ol><li>在http1.1中发送请求，在tcp连接上发送数据是必须要发送完一个请求后，在发送第二个请求，同时服务端返回也是要把前一个请求的数据全部返回之后，才能返回第二个数据，也就是第一个数据请求特别慢，第二个请求比他先执行完成，但还是会等第一个请求执行完成，才能返回，所以如果复用一个tcp连接，在http1.1中，其实是一个串行的过程，而不是一个并行的过程，所以效率比较低</li><li>在http2中得意于信道复用和分帧传输的好处，所以网站开启http2之后我们每个用户访问我们的网站他永远只需要创建一个tcp连接，因为在这个tcp连接上面，我们完全可以并发的发送，并发的返回，没有一个阻塞的过程，同时服务端还可以根据需求主动的响应用户推送一些消息</li><li>http2是由谷歌之前开发的spdy的一个协议演化而来的，spdy需要使用https，所以目前仅支持https</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;信道复用&quot;&gt;&lt;a href=&quot;#信道复用&quot; class=&quot;headerlink&quot; title=&quot;信道复用&quot;&gt;&lt;/a&gt;信道复用&lt;/h1&gt;&lt;h1 id=&quot;分帧传输&quot;&gt;&lt;a href=&quot;#分帧传输&quot; class=&quot;headerlink&quot; title=&quot;分帧传输&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="http协议" scheme="http://myzhangning.top/categories/http%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="http协议" scheme="http://myzhangning.top/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>http三次握手</title>
    <link href="http://myzhangning.top/2018/08/28/threeHands/"/>
    <id>http://myzhangning.top/2018/08/28/threeHands/</id>
    <published>2018-08-28T15:40:00.000Z</published>
    <updated>2018-08-28T15:32:42.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http-与-tcp之间的关系"><a href="#http-与-tcp之间的关系" class="headerlink" title="http 与 tcp之间的关系"></a>http 与 tcp之间的关系</h1><p>   user 通过（http）–&gt; tcp Connection –&gt; 服务端<br>   三次握手的主要原因是规避网络传输当中延时导致的一些服务器开销的问题</p><h1 id="三次握手时序图"><a href="#三次握手时序图" class="headerlink" title="三次握手时序图"></a>三次握手时序图</h1><img src="/2018/08/28/threeHands/hands.png" title="三次握手时序图">]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http-与-tcp之间的关系&quot;&gt;&lt;a href=&quot;#http-与-tcp之间的关系&quot; class=&quot;headerlink&quot; title=&quot;http 与 tcp之间的关系&quot;&gt;&lt;/a&gt;http 与 tcp之间的关系&lt;/h1&gt;&lt;p&gt;   user 通过（http）–&amp;
      
    
    </summary>
    
      <category term="http协议" scheme="http://myzhangning.top/categories/http%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="http协议" scheme="http://myzhangning.top/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>http协议历史</title>
    <link href="http://myzhangning.top/2018/08/27/http-history/"/>
    <id>http://myzhangning.top/2018/08/27/http-history/</id>
    <published>2018-08-27T15:56:19.000Z</published>
    <updated>2018-08-27T16:17:40.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="http-0-9"><a href="#http-0-9" class="headerlink" title="http/0.9"></a>http/0.9</h1><pre><code>只有一个命令GET,没有HEADER等描述数据的信息，服务器发送完数据，就关闭tcp连接tcp连接与http连接：    一个tcp连接可以对应几个http请求，一个http请求是在某一个tcp连接中进行发送</code></pre><h1 id="http-1-0"><a href="#http-1-0" class="headerlink" title="http/1.0"></a>http/1.0</h1><pre><code>增加了很多命令，增加status code 和header，多字符集支持，多部分发送，权限，缓存等</code></pre><h1 id="http-1-1"><a href="#http-1-1" class="headerlink" title="http/1.1"></a>http/1.1</h1><pre><code>持久连接，增加host和其他一些命令（host可以在同一台服务器建立多个web服务）</code></pre><h1 id="http2-主要解决http中性能问题"><a href="#http2-主要解决http中性能问题" class="headerlink" title="http2(主要解决http中性能问题)"></a>http2(主要解决http中性能问题)</h1><pre><code>一、所有数据以二进制传输（帧）二、同一个连接里发送多个请求不在需要按照顺序来（提高传输效率）三、头信息压缩（减小带宽使用）以及推送（服务端可以主动发起数据传输）等提高效率的功能例如：web页面都有html，css，js文件，需要先请求到html文本然后在浏览器中运行解析完成以后，我们才能发送css，js请求，有了推送这个功能以后，可以在请求html的同时，主动把css，js文件推送给客户端，这样是一个并行发送的关系，而不是串行的，整体传输效率、性能会很高</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;http-0-9&quot;&gt;&lt;a href=&quot;#http-0-9&quot; class=&quot;headerlink&quot; title=&quot;http/0.9&quot;&gt;&lt;/a&gt;http/0.9&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;只有一个命令GET,没有HEADER等描述数据的信息，服务器发送完数据，就关
      
    
    </summary>
    
      <category term="http协议" scheme="http://myzhangning.top/categories/http%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="http协议" scheme="http://myzhangning.top/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>http协议基础及历史</title>
    <link href="http://myzhangning.top/2018/08/27/http-protocol-and-history/"/>
    <id>http://myzhangning.top/2018/08/27/http-protocol-and-history/</id>
    <published>2018-08-27T15:41:02.000Z</published>
    <updated>2018-08-27T15:54:51.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="五层协议"><a href="#五层协议" class="headerlink" title="五层协议"></a>五层协议</h1><img src="/2018/08/27/http-protocol-and-history/tcp-ip.png" title="五层协议示意图"><ol><li>物理层主要作用是定义物理设备如何传输数据（光缆）</li><li>数据链路层在通信的实体间建立数据链路连接</li><li>网络层为数据在结点之间传输创建逻辑链路</li><li>传输层向用户提供可靠的端到端（End-to-End）服务</li><li>传输层向高层屏蔽了下层数据通信的细节（例如：ajax post传输数据，这个数据大时一次性传输不完，如何进行传输，如何可靠的把信息传输给服务器，服务器返回的信息又如何可靠的被我们拿到，都是传输层实现的）</li><li>应用层为应用软件提供了很多服务，构建于tcp/ip协议之上屏蔽网络传输层相关细节</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;五层协议&quot;&gt;&lt;a href=&quot;#五层协议&quot; class=&quot;headerlink&quot; title=&quot;五层协议&quot;&gt;&lt;/a&gt;五层协议&lt;/h1&gt;&lt;img src=&quot;/2018/08/27/http-protocol-and-history/tcp-ip.png&quot; title
      
    
    </summary>
    
      <category term="http协议" scheme="http://myzhangning.top/categories/http%E5%8D%8F%E8%AE%AE/"/>
    
    
      <category term="http协议" scheme="http://myzhangning.top/tags/http%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>直播源的制作</title>
    <link href="http://myzhangning.top/2018/08/26/makeLive/"/>
    <id>http://myzhangning.top/2018/08/26/makeLive/</id>
    <published>2018-08-26T09:40:00.000Z</published>
    <updated>2018-08-26T12:14:33.631Z</updated>
    
    <content type="html"><![CDATA[<ol><li>安装nginx<br> brew tap denji/homebrew-nginx<br> brew install nginx-full –with-rtmp-module</li><li>安装ffmpeg<br> brew install ffmpeg</li><li><p>找到nginx 安装目录修改配置<br>配置Nginx,支持http协议拉流</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">location /hls &#123;</span><br><span class="line">    #Serve HLS config</span><br><span class="line">    types &#123;</span><br><span class="line">        application/vnd.apple.mpegurl    m3u8;</span><br><span class="line">        video/mp2t ts;</span><br><span class="line">    &#125;</span><br><span class="line">    root /usr/local/var/www;</span><br><span class="line">    add_header Cache-Control    no-cache;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 配置Nginx，支持rtmp协议推流</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    rtmp &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen 1935;</span><br><span class="line">        application rtmplive &#123;</span><br><span class="line">            live on;</span><br><span class="line">            max_connections 1024;</span><br><span class="line">        &#125;</span><br><span class="line">        application hls&#123;</span><br><span class="line">            live on;</span><br><span class="line">            hls on;</span><br><span class="line">            hls_path /usr/local/var/www/hls;</span><br><span class="line">            hls_fragment 1s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>找测试源<br> cd test.mp4</p></li><li>启动nginx<br>nginx</li><li>推流至RTMP到服务器<br> ffmpeg -re -i test-2.mp4 -vcodec libx264 -acodec aac -f flv rtmp://localhost:1935/rtmplive/rtmp<br> 测试：<pre><code>下载vlc file=》open network 输入rtmp://localhost:1935/rtmplive/rtmp</code></pre></li><li>推流至HLS到服务器<br> ffmpeg -re -i test-2.mp4 -vcodec libx264 -acodec aac -f flv rtmp://localhost:1935/hls/strem<br> 测试： <pre><code>打开safari浏览器输入 localhost:1935/hls/strem.m3u8</code></pre></li><li>提示<br> 所有操作均在mac下</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;安装nginx&lt;br&gt; brew tap denji/homebrew-nginx&lt;br&gt; brew install nginx-full –with-rtmp-module&lt;/li&gt;
&lt;li&gt;安装ffmpeg&lt;br&gt; brew install ffmpeg&lt;/
      
    
    </summary>
    
      <category term="h5直播" scheme="http://myzhangning.top/categories/h5%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="h5直播" scheme="http://myzhangning.top/tags/h5%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>h5直播</title>
    <link href="http://myzhangning.top/2018/08/08/h5_1/"/>
    <id>http://myzhangning.top/2018/08/08/h5_1/</id>
    <published>2018-08-07T16:59:49.000Z</published>
    <updated>2018-08-07T16:54:12.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="直播原理"><a href="#直播原理" class="headerlink" title="直播原理"></a>直播原理</h1><img src="/2018/08/08/h5_1/yuanli.png" title="h5直播原理"><ol><li>收集完是流的形式（原始二进制数据流）</li><li>原始的流是不可以进行播放的，必须采用协议做编码</li><li>H.264 视频编码，AAC 为音频编码</li></ol><h1 id="视频格式"><a href="#视频格式" class="headerlink" title="视频格式"></a>视频格式</h1><img src="/2018/08/08/h5_1/视频格式.png" title="视频格式"><ol><li>mp4 兼容性好 IE,chrome,Firfox,safari 都支持</li><li>webm(yourtobe) chrome,Firfox 支持 IE,safari 不支持 webm是一种流式的视频格式</li><li>hls（.ts格式） Safari支持，苹果自己的协议</li><li>flv（.flv格式）早期flash视频格式 如：b站</li></ol><h1 id="直播协议"><a href="#直播协议" class="headerlink" title="直播协议"></a>直播协议</h1><ol><li>HLS 协议</li><li>RTMP 协议</li><li>HTTP-FLV协议</li></ol><h1 id="播放器分为"><a href="#播放器分为" class="headerlink" title="播放器分为"></a>播放器分为</h1><ol><li>点播：如优酷看视频</li><li>直播：b站,斗鱼（live）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;直播原理&quot;&gt;&lt;a href=&quot;#直播原理&quot; class=&quot;headerlink&quot; title=&quot;直播原理&quot;&gt;&lt;/a&gt;直播原理&lt;/h1&gt;&lt;img src=&quot;/2018/08/08/h5_1/yuanli.png&quot; title=&quot;h5直播原理&quot;&gt;
&lt;ol&gt;
&lt;li&gt;收
      
    
    </summary>
    
      <category term="h5直播" scheme="http://myzhangning.top/categories/h5%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="h5直播" scheme="http://myzhangning.top/tags/h5%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>hls</title>
    <link href="http://myzhangning.top/2018/08/08/hls/"/>
    <id>http://myzhangning.top/2018/08/08/hls/</id>
    <published>2018-08-07T16:39:49.000Z</published>
    <updated>2018-08-07T16:51:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hls-协议"><a href="#hls-协议" class="headerlink" title="hls 协议"></a>hls 协议</h1><img src="/2018/08/08/hls/HLS协议.png" title="video拿到m3u8文件解析过程"><ol><li>HLS协议是苹果提出的直播协议</li><li>M3U8的每一个片段就是直播流的一个分段<br>总结： HLS协议的直播来说它是先发送一个M3U8文件，M3U8文件会有很多索引告诉你有几个片段，这时就能播放</li></ol><h1 id="M3U8-文件的更新"><a href="#M3U8-文件的更新" class="headerlink" title="M3U8 文件的更新"></a>M3U8 文件的更新</h1><ol><li>video会在某个时间段内重新请求M3U8文件（浏览器自己的行为）, 这时服务器会返回新的M3U8文件</li><li>M3U8文件有很多索引对应TS文件</li><li>M3U8文件可以嵌套M3U8文件</li></ol><h1 id="M3U8-文件嵌套"><a href="#M3U8-文件嵌套" class="headerlink" title="M3U8 文件嵌套"></a>M3U8 文件嵌套</h1><img src="/2018/08/08/hls/M3U8文件嵌套.png" title="M3U8文件嵌套示意图"><h1 id="M3U8文件的细分"><a href="#M3U8文件的细分" class="headerlink" title="M3U8文件的细分"></a>M3U8文件的细分</h1><img src="/2018/08/08/hls/m3u8文件细分.png" title="m3u8文件细分"><h1 id="M3U8-文件内容"><a href="#M3U8-文件内容" class="headerlink" title="M3U8 文件内容"></a>M3U8 文件内容</h1><img src="/2018/08/08/hls/m3u8动态文件内容.png" title="m3u8动态文件内容"><ol><li>#EXTM3U  动态列表文件如下：</li><li>#EXT-X-VERSIOIV:6 版本 （默认为3）</li><li>#EXT-X-TARGETDURATION: 时长</li><li>#EXT-X-MEDIA-SEQUENCE: 26 序号</li><li>EXTINF: 9.901 下面时长为多少<br> <a href="http://media.example.om/wifi/segment26.ts" target="_blank" rel="noopener">http://media.example.om/wifi/segment26.ts</a></li></ol><h1 id="ts-文件和mp4，webm，flv之间的区别"><a href="#ts-文件和mp4，webm，flv之间的区别" class="headerlink" title="ts 文件和mp4，webm，flv之间的区别"></a>ts 文件和mp4，webm，flv之间的区别</h1><img src="/2018/08/08/hls/ts文件.png" title="ts文件"><ol><li>RMT 会告诉哪个TS包是视频，哪些是音频</li><li>TS 文件先找PAT的包，PAT告诉PMT在哪里 PMT去找对应TS</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hls-协议&quot;&gt;&lt;a href=&quot;#hls-协议&quot; class=&quot;headerlink&quot; title=&quot;hls 协议&quot;&gt;&lt;/a&gt;hls 协议&lt;/h1&gt;&lt;img src=&quot;/2018/08/08/hls/HLS协议.png&quot; title=&quot;video拿到m3u8文件
      
    
    </summary>
    
      <category term="h5直播" scheme="http://myzhangning.top/categories/h5%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="h5直播" scheme="http://myzhangning.top/tags/h5%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>HTTP_FLV</title>
    <link href="http://myzhangning.top/2018/08/08/HTTP-FLV/"/>
    <id>http://myzhangning.top/2018/08/08/HTTP-FLV/</id>
    <published>2018-08-07T16:29:49.000Z</published>
    <updated>2018-08-07T16:54:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP-FLV协议"><a href="#HTTP-FLV协议" class="headerlink" title="HTTP-FLV协议"></a>HTTP-FLV协议</h1><img src="/2018/08/08/HTTP-FLV/HTTP-FLV协议.png" title="HTTP-FLV协议"><ol><li>低延时</li><li>传输为flv格式与RTMP都是长连接，中间传输的都是flv，区别：播放器到CDN之间建立的连接是HTTP请求,而RTMP为TCP<h1 id="HTTP-FLV协议的优势"><a href="#HTTP-FLV协议的优势" class="headerlink" title="HTTP-FLV协议的优势"></a>HTTP-FLV协议的优势</h1></li><li>可以在一定程度上避免防火墙的干扰（如：有的机房只允许80端口通过）</li><li>可以很好的兼容HTTP 302 跳转，做到灵活调度</li><li>可以使用HTTPS 做加密通道</li><li>很好的支持移动端（Android, ios）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP-FLV协议&quot;&gt;&lt;a href=&quot;#HTTP-FLV协议&quot; class=&quot;headerlink&quot; title=&quot;HTTP-FLV协议&quot;&gt;&lt;/a&gt;HTTP-FLV协议&lt;/h1&gt;&lt;img src=&quot;/2018/08/08/HTTP-FLV/HTTP-FLV协议
      
    
    </summary>
    
      <category term="h5直播" scheme="http://myzhangning.top/categories/h5%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="h5直播" scheme="http://myzhangning.top/tags/h5%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>RTMP</title>
    <link href="http://myzhangning.top/2018/08/08/RTMP/"/>
    <id>http://myzhangning.top/2018/08/08/RTMP/</id>
    <published>2018-08-07T16:19:49.000Z</published>
    <updated>2018-08-07T16:57:28.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RTMP协议概述"><a href="#RTMP协议概述" class="headerlink" title="RTMP协议概述"></a>RTMP协议概述</h1><img src="/2018/08/08/RTMP/RTMP协议概述.png" title="RTMP协议概述"><ol><li>RTMP 协议使用相对复杂（实时消息传输协议）基于HTTP,主要用于flash，如果采集端是web端来做它的协议叫做webRTC</li><li>客户端为RTMP协议效率高一些</li></ol><h1 id="RTMP协议"><a href="#RTMP协议" class="headerlink" title="RTMP协议"></a>RTMP协议</h1><img src="/2018/08/08/RTMP/RTMP协议.png" title="RTMP协议"><ol><li>RTMP 协议传输过程是flv视频格式的</li><li>RTMP –&gt; TCP HLS –&gt; HTTP</li><li>HLS 简单但实时性相对差，有延时（延时与M3U8文件的索引文件数量有关）</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RTMP协议概述&quot;&gt;&lt;a href=&quot;#RTMP协议概述&quot; class=&quot;headerlink&quot; title=&quot;RTMP协议概述&quot;&gt;&lt;/a&gt;RTMP协议概述&lt;/h1&gt;&lt;img src=&quot;/2018/08/08/RTMP/RTMP协议概述.png&quot; title=&quot;R
      
    
    </summary>
    
      <category term="h5直播" scheme="http://myzhangning.top/categories/h5%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="h5直播" scheme="http://myzhangning.top/tags/h5%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>直播总结</title>
    <link href="http://myzhangning.top/2018/08/08/%E7%9B%B4%E6%92%AD%E6%80%BB%E7%BB%93/"/>
    <id>http://myzhangning.top/2018/08/08/直播总结/</id>
    <published>2018-08-07T16:09:49.000Z</published>
    <updated>2018-08-27T15:19:06.850Z</updated>
    
    <content type="html"><![CDATA[<ol><li>如果采集用客户端来做，通常使用RTMP协议（后端对TCP比较了解）</li><li>对于低延时的场景使用RTMP协议或者HTTP-FLV,对于延时要求不高的     可以使用HLS不需要考虑并发</li><li>video 标签中的地址为blob时，用的是虚拟地址（防止视频被下载）<br> 如：src=’blob:https://…..’</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;如果采集用客户端来做，通常使用RTMP协议（后端对TCP比较了解）&lt;/li&gt;
&lt;li&gt;对于低延时的场景使用RTMP协议或者HTTP-FLV,对于延时要求不高的     可以使用HLS不需要考虑并发&lt;/li&gt;
&lt;li&gt;video 标签中的地址为blob时，用的是虚
      
    
    </summary>
    
      <category term="h5直播" scheme="http://myzhangning.top/categories/h5%E7%9B%B4%E6%92%AD/"/>
    
    
      <category term="h5直播" scheme="http://myzhangning.top/tags/h5%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB配置</title>
    <link href="http://myzhangning.top/2018/03/05/mongoDB%E9%85%8D%E7%BD%AE/"/>
    <id>http://myzhangning.top/2018/03/05/mongoDB配置/</id>
    <published>2018-03-04T16:00:00.000Z</published>
    <updated>2018-03-05T03:28:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>配置MongoDB<br>a.在c:\MongoDB（可随意起）下面建一个data文件夹 c:\MongoDB\data<br>b.在c:\MongoDB（可随意起）下面建一个logs文件夹 c:\MongoDB\logs ，在里面建一个文件mongo.log<br>c.在c:\MongoDB（可随意起）下面建一个etc(随意起，放配置文件)文件夹 c:\MongoDB\etc ,在里面建一个文件mongo.conf<br>d.打开mongo.conf文件，修改如下：<br> <!-- #数据库路径 --><br>dbpath=c:\MongoDB\data\<br><!-- #日志输出文件路径 --><br>logpath=c:\MongoDB\logs\mongodb.log<br><!-- #错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件 --><br>logappend=true<br><!-- #启用日志文件，默认启用 --><br>journal=true<br><!-- #这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false --><br>quiet=false<br><!-- #端口号 默认为27017 --><br>port=27017<br><!-- #指定存储引擎（默认先不加此引擎，如果报错了，大家在加进去） --><br>storageEngine=mmapv1<br>完成以上操作后，我们就可以启动我们的mongo数据库了。</p><!-- # 在服务中写入 --><p>mongod –config c:\MongoDB\etc\mongo.conf –install –serviceName “MongoDB”</p><!-- 在环境变量path中配置MongoDB --><p>c:\Program Files\MongoDB\Server\3.4\bin</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;配置MongoDB&lt;br&gt;a.在c:\MongoDB（可随意起）下面建一个data文件夹 c:\MongoDB\data&lt;br&gt;b.在c:\MongoDB（可随意起）下面建一个logs文件夹 c:\MongoDB\logs ，在里面建一个文件mongo.log&lt;br&gt;c.在
      
    
    </summary>
    
      <category term="mongoDB" scheme="http://myzhangning.top/categories/mongoDB/"/>
    
    
  </entry>
  
</feed>

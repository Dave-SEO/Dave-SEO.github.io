(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{613:function(t,l,i){"use strict";i.r(l);var v=i(3),e=Object(v.a)({},(function(){var t=this,l=t.$createElement,i=t._self._c||l;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h5",{attrs:{id:"五大设计原则"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#五大设计原则"}},[t._v("#")]),t._v(" 五大设计原则")]),t._v(" "),i("ol",[i("li",[t._v("S - 单一职责原则 The Single-Responsibility Principle (SRP)")])]),t._v(" "),i("ul",[i("li",[t._v("一个程序只做好一件事")]),t._v(" "),i("li",[t._v("如果功能过于复杂就拆分开，每个部分保持独立")])]),t._v(" "),i("ol",{attrs:{start:"2"}},[i("li",[t._v("o - 开放封闭原则 The Open/Closed Principle (OCP)")])]),t._v(" "),i("ul",[i("li",[t._v("对扩展开放，对修改封闭")]),t._v(" "),i("li",[t._v("增加需求时，扩展新代码，而非修改已有代码")]),t._v(" "),i("li",[t._v("这是软件设计的终极目标")])]),t._v(" "),i("ol",{attrs:{start:"3"}},[i("li",[t._v("L - 李氏置换原则 The Liskov Substitution Principle (LSP)")])]),t._v(" "),i("ul",[i("li",[t._v("子类能覆盖父类")]),t._v(" "),i("li",[t._v("父类能出现的地方子类就能出现")]),t._v(" "),i("li",[t._v("js 中使用较少（弱类型 & 继承使用较少）")])]),t._v(" "),i("ol",{attrs:{start:"4"}},[i("li",[t._v("I - 接口独立原则 The Interface Segregation Principle (ISP)")])]),t._v(" "),i("ul",[i("li",[t._v("保持接口的单一独立，避免出现“胖接口”")]),t._v(" "),i("li",[t._v("js中没有接口（typescript例外），使用较少")]),t._v(" "),i("li",[t._v("类似于单一职责原则，这里更关注接口")])]),t._v(" "),i("ol",{attrs:{start:"5"}},[i("li",[t._v("D - 依赖导致原则 The Dependency-Inversion Principle (DIP)")])]),t._v(" "),i("ul",[i("li",[t._v("面向接口编程，依赖于抽象而不依赖于具体")]),t._v(" "),i("li",[t._v("使用方只关注接口而不关注具体类的实现")]),t._v(" "),i("li",[t._v("js使用较少（没有接口 & 弱类型）")])])])}),[],!1,null,null,null);l.default=e.exports}}]);